-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RLWE_enc2 is
generic (
    C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_WVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_WREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH/8-1 downto 0);
    s_axi_S_AXI_BUNDLE_ARVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_ARREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_RVALID : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_RREADY : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_S_AXI_BUNDLE_BVALID : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_BREADY : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of RLWE_enc2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "RLWE_enc2,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=17,HLS_SYN_DSP=192,HLS_SYN_FF=7987,HLS_SYN_LUT=9209}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_C : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001100";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv64_8883FB99BF246 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000001000100010000011111110111001100110111111001001000110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv45_1E01 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001111000000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a_ce0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_ce0 : STD_LOGIC;
    signal c1_we0 : STD_LOGIC;
    signal c1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_ce0 : STD_LOGIC;
    signal c2_we0 : STD_LOGIC;
    signal c2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_ce0 : STD_LOGIC;
    signal m_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_ce0 : STD_LOGIC;
    signal p_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_fu_295_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_646 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_651 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_664 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal e3_addr_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_i_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_351_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_1_reg_679 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal lowbits_r_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowbits_r_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal lowbits_l_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_fu_392_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_reg_699 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_60_reg_704 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_5_fu_437_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_5_reg_712 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal exitcond_i2_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c1_addr_reg_722 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_2_fu_457_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_2_reg_727 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal lowbits_r_1_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowbits_r_1_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal lowbits_l_1_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_4_fu_498_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_4_reg_747 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_62_reg_752 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_6_fu_543_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_6_reg_760 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal exitcond_i1_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c2_addr_reg_770 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_3_fu_563_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_3_reg_775 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal lowbits_r_2_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowbits_r_2_reg_785 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal lowbits_l_2_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_6_fu_604_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_6_reg_795 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_64_reg_800 : STD_LOGIC_VECTOR (12 downto 0);
    signal e1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e1_ce0 : STD_LOGIC;
    signal e1_we0 : STD_LOGIC;
    signal e1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal e1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal e1_ce1 : STD_LOGIC;
    signal e1_we1 : STD_LOGIC;
    signal e1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal e2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e2_ce0 : STD_LOGIC;
    signal e2_we0 : STD_LOGIC;
    signal e2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal e2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal e2_ce1 : STD_LOGIC;
    signal e2_we1 : STD_LOGIC;
    signal e2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal e3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e3_ce0 : STD_LOGIC;
    signal e3_we0 : STD_LOGIC;
    signal e3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal e3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal e3_ce1 : STD_LOGIC;
    signal e3_we1 : STD_LOGIC;
    signal e3_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal encoded_m_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal encoded_m_ce0 : STD_LOGIC;
    signal encoded_m_we0 : STD_LOGIC;
    signal encoded_m_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal encoded_m_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fwd_ntt2_fu_237_ap_start : STD_LOGIC;
    signal grp_fwd_ntt2_fu_237_ap_done : STD_LOGIC;
    signal grp_fwd_ntt2_fu_237_ap_idle : STD_LOGIC;
    signal grp_fwd_ntt2_fu_237_ap_ready : STD_LOGIC;
    signal grp_fwd_ntt2_fu_237_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fwd_ntt2_fu_237_a_ce0 : STD_LOGIC;
    signal grp_fwd_ntt2_fu_237_a_we0 : STD_LOGIC;
    signal grp_fwd_ntt2_fu_237_a_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fwd_ntt2_fu_237_a_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fwd_ntt2_fu_237_a_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fwd_ntt2_fu_237_a_ce1 : STD_LOGIC;
    signal grp_fwd_ntt2_fu_237_a_we1 : STD_LOGIC;
    signal grp_fwd_ntt2_fu_237_a_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fwd_ntt2_fu_237_a_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fwd_ntt2_fu_244_ap_start : STD_LOGIC;
    signal grp_fwd_ntt2_fu_244_ap_done : STD_LOGIC;
    signal grp_fwd_ntt2_fu_244_ap_idle : STD_LOGIC;
    signal grp_fwd_ntt2_fu_244_ap_ready : STD_LOGIC;
    signal grp_fwd_ntt2_fu_244_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fwd_ntt2_fu_244_a_ce0 : STD_LOGIC;
    signal grp_fwd_ntt2_fu_244_a_we0 : STD_LOGIC;
    signal grp_fwd_ntt2_fu_244_a_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fwd_ntt2_fu_244_a_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fwd_ntt2_fu_244_a_ce1 : STD_LOGIC;
    signal grp_fwd_ntt2_fu_244_a_we1 : STD_LOGIC;
    signal grp_fwd_ntt2_fu_244_a_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_knuth_yao2_fu_251_ap_start : STD_LOGIC;
    signal grp_knuth_yao2_fu_251_ap_done : STD_LOGIC;
    signal grp_knuth_yao2_fu_251_ap_idle : STD_LOGIC;
    signal grp_knuth_yao2_fu_251_ap_ready : STD_LOGIC;
    signal grp_knuth_yao2_fu_251_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_knuth_yao2_fu_251_a_ce0 : STD_LOGIC;
    signal grp_knuth_yao2_fu_251_a_we0 : STD_LOGIC;
    signal grp_knuth_yao2_fu_251_a_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_coefficient_mul2_fu_266_ap_start : STD_LOGIC;
    signal grp_coefficient_mul2_fu_266_ap_done : STD_LOGIC;
    signal grp_coefficient_mul2_fu_266_ap_idle : STD_LOGIC;
    signal grp_coefficient_mul2_fu_266_ap_ready : STD_LOGIC;
    signal grp_coefficient_mul2_fu_266_out_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coefficient_mul2_fu_266_out_r_ce0 : STD_LOGIC;
    signal grp_coefficient_mul2_fu_266_out_r_we0 : STD_LOGIC;
    signal grp_coefficient_mul2_fu_266_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_coefficient_mul2_fu_266_b_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coefficient_mul2_fu_266_b_ce0 : STD_LOGIC;
    signal grp_coefficient_mul2_fu_266_b_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_coefficient_mul2_fu_266_c_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coefficient_mul2_fu_266_c_ce0 : STD_LOGIC;
    signal grp_rearrange2_fu_277_ap_start : STD_LOGIC;
    signal grp_rearrange2_fu_277_ap_done : STD_LOGIC;
    signal grp_rearrange2_fu_277_ap_idle : STD_LOGIC;
    signal grp_rearrange2_fu_277_ap_ready : STD_LOGIC;
    signal grp_rearrange2_fu_277_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rearrange2_fu_277_a_ce0 : STD_LOGIC;
    signal grp_rearrange2_fu_277_a_we0 : STD_LOGIC;
    signal grp_rearrange2_fu_277_a_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_rearrange2_fu_283_ap_start : STD_LOGIC;
    signal grp_rearrange2_fu_283_ap_done : STD_LOGIC;
    signal grp_rearrange2_fu_283_ap_idle : STD_LOGIC;
    signal grp_rearrange2_fu_283_ap_ready : STD_LOGIC;
    signal grp_rearrange2_fu_283_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rearrange2_fu_283_a_ce0 : STD_LOGIC;
    signal grp_rearrange2_fu_283_a_we0 : STD_LOGIC;
    signal grp_rearrange2_fu_283_a_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_193 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_i_reg_204 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j_i1_reg_215 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_state17_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal j_i2_reg_226 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_reg_grp_fwd_ntt2_fu_237_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_reg_grp_fwd_ntt2_fu_244_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_knuth_yao2_fu_251_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_reg_grp_coefficient_mul2_fu_266_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_rearrange2_fu_277_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_reg_grp_rearrange2_fu_283_ap_start : STD_LOGIC := '0';
    signal tmp_i_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_i_fu_426_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_i_i1_fu_532_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_i_i2_fu_638_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_108_fu_306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_fu_312_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_118_i_cast_fu_347_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_cast_fu_343_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_360_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_360_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pp1_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp1_fu_383_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp1_4_cast_fu_408_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_3_fu_411_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_61_fu_416_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_116_i_cast_fu_453_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i4_cast_fu_449_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_466_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_466_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pp1_1_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_4_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp1_1_fu_489_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp1_3_i_cast_fu_514_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_5_fu_517_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_63_fu_522_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_116_i20_cast_fu_559_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i17_cast_fu_555_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_572_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_572_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_572_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pp1_2_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_6_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp1_2_fu_595_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp1_3_i33_cast_fu_620_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_7_fu_623_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_65_fu_628_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state31_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_360_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_466_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_572_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal pp1_1_fu_489_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp1_2_fu_595_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp1_fu_383_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_4_fu_498_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_6_fu_604_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_fu_392_p10 : STD_LOGIC_VECTOR (44 downto 0);

    component fwd_ntt2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_we1 : OUT STD_LOGIC;
        a_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component knuth_yao2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component coefficient_mul2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component rearrange2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component RLWE_enc2_mul_53nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component RLWE_enc2_e1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component RLWE_enc2_encoded_m IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component RLWE_enc2_S_AXI_BUNDLE_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : IN STD_LOGIC;
        a_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c1_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c1_ce0 : IN STD_LOGIC;
        c1_we0 : IN STD_LOGIC;
        c1_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c2_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c2_ce0 : IN STD_LOGIC;
        c2_we0 : IN STD_LOGIC;
        c2_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c2_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_ce0 : IN STD_LOGIC;
        m_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ce0 : IN STD_LOGIC;
        p_q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    RLWE_enc2_S_AXI_BUNDLE_s_axi_U : component RLWE_enc2_S_AXI_BUNDLE_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_S_AXI_BUNDLE_AWVALID,
        AWREADY => s_axi_S_AXI_BUNDLE_AWREADY,
        AWADDR => s_axi_S_AXI_BUNDLE_AWADDR,
        WVALID => s_axi_S_AXI_BUNDLE_WVALID,
        WREADY => s_axi_S_AXI_BUNDLE_WREADY,
        WDATA => s_axi_S_AXI_BUNDLE_WDATA,
        WSTRB => s_axi_S_AXI_BUNDLE_WSTRB,
        ARVALID => s_axi_S_AXI_BUNDLE_ARVALID,
        ARREADY => s_axi_S_AXI_BUNDLE_ARREADY,
        ARADDR => s_axi_S_AXI_BUNDLE_ARADDR,
        RVALID => s_axi_S_AXI_BUNDLE_RVALID,
        RREADY => s_axi_S_AXI_BUNDLE_RREADY,
        RDATA => s_axi_S_AXI_BUNDLE_RDATA,
        RRESP => s_axi_S_AXI_BUNDLE_RRESP,
        BVALID => s_axi_S_AXI_BUNDLE_BVALID,
        BREADY => s_axi_S_AXI_BUNDLE_BREADY,
        BRESP => s_axi_S_AXI_BUNDLE_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a_address0 => grp_coefficient_mul2_fu_266_b_address0,
        a_ce0 => a_ce0,
        a_q0 => a_q0,
        c1_address0 => c1_address0,
        c1_ce0 => c1_ce0,
        c1_we0 => c1_we0,
        c1_d0 => c1_d0,
        c1_q0 => c1_q0,
        c2_address0 => c2_address0,
        c2_ce0 => c2_ce0,
        c2_we0 => c2_we0,
        c2_d0 => c2_d0,
        c2_q0 => c2_q0,
        m_address0 => m_address0,
        m_ce0 => m_ce0,
        m_q0 => m_q0,
        p_address0 => grp_coefficient_mul2_fu_266_b_address0,
        p_ce0 => p_ce0,
        p_q0 => p_q0);

    e1_U : component RLWE_enc2_e1
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => e1_address0,
        ce0 => e1_ce0,
        we0 => e1_we0,
        d0 => e1_d0,
        q0 => e1_q0,
        address1 => grp_fwd_ntt2_fu_237_a_address1,
        ce1 => e1_ce1,
        we1 => e1_we1,
        d1 => grp_fwd_ntt2_fu_237_a_d1,
        q1 => e1_q1);

    e2_U : component RLWE_enc2_e1
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => e2_address0,
        ce0 => e2_ce0,
        we0 => e2_we0,
        d0 => e2_d0,
        q0 => e2_q0,
        address1 => grp_fwd_ntt2_fu_237_a_address1,
        ce1 => e2_ce1,
        we1 => e2_we1,
        d1 => grp_fwd_ntt2_fu_237_a_d1,
        q1 => e2_q1);

    e3_U : component RLWE_enc2_e1
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => e3_address0,
        ce0 => e3_ce0,
        we0 => e3_we0,
        d0 => e3_d0,
        q0 => e3_q0,
        address1 => grp_fwd_ntt2_fu_244_a_address1,
        ce1 => e3_ce1,
        we1 => e3_we1,
        d1 => grp_fwd_ntt2_fu_244_a_d1,
        q1 => e3_q1);

    encoded_m_U : component RLWE_enc2_encoded_m
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => encoded_m_address0,
        ce0 => encoded_m_ce0,
        we0 => encoded_m_we0,
        d0 => encoded_m_d0,
        q0 => encoded_m_q0);

    grp_fwd_ntt2_fu_237 : component fwd_ntt2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fwd_ntt2_fu_237_ap_start,
        ap_done => grp_fwd_ntt2_fu_237_ap_done,
        ap_idle => grp_fwd_ntt2_fu_237_ap_idle,
        ap_ready => grp_fwd_ntt2_fu_237_ap_ready,
        a_address0 => grp_fwd_ntt2_fu_237_a_address0,
        a_ce0 => grp_fwd_ntt2_fu_237_a_ce0,
        a_we0 => grp_fwd_ntt2_fu_237_a_we0,
        a_d0 => grp_fwd_ntt2_fu_237_a_d0,
        a_q0 => grp_fwd_ntt2_fu_237_a_q0,
        a_address1 => grp_fwd_ntt2_fu_237_a_address1,
        a_ce1 => grp_fwd_ntt2_fu_237_a_ce1,
        a_we1 => grp_fwd_ntt2_fu_237_a_we1,
        a_d1 => grp_fwd_ntt2_fu_237_a_d1,
        a_q1 => grp_fwd_ntt2_fu_237_a_q1);

    grp_fwd_ntt2_fu_244 : component fwd_ntt2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fwd_ntt2_fu_244_ap_start,
        ap_done => grp_fwd_ntt2_fu_244_ap_done,
        ap_idle => grp_fwd_ntt2_fu_244_ap_idle,
        ap_ready => grp_fwd_ntt2_fu_244_ap_ready,
        a_address0 => grp_fwd_ntt2_fu_244_a_address0,
        a_ce0 => grp_fwd_ntt2_fu_244_a_ce0,
        a_we0 => grp_fwd_ntt2_fu_244_a_we0,
        a_d0 => grp_fwd_ntt2_fu_244_a_d0,
        a_q0 => e3_q0,
        a_address1 => grp_fwd_ntt2_fu_244_a_address1,
        a_ce1 => grp_fwd_ntt2_fu_244_a_ce1,
        a_we1 => grp_fwd_ntt2_fu_244_a_we1,
        a_d1 => grp_fwd_ntt2_fu_244_a_d1,
        a_q1 => e3_q1);

    grp_knuth_yao2_fu_251 : component knuth_yao2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_knuth_yao2_fu_251_ap_start,
        ap_done => grp_knuth_yao2_fu_251_ap_done,
        ap_idle => grp_knuth_yao2_fu_251_ap_idle,
        ap_ready => grp_knuth_yao2_fu_251_ap_ready,
        a_address0 => grp_knuth_yao2_fu_251_a_address0,
        a_ce0 => grp_knuth_yao2_fu_251_a_ce0,
        a_we0 => grp_knuth_yao2_fu_251_a_we0,
        a_d0 => grp_knuth_yao2_fu_251_a_d0);

    grp_coefficient_mul2_fu_266 : component coefficient_mul2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_coefficient_mul2_fu_266_ap_start,
        ap_done => grp_coefficient_mul2_fu_266_ap_done,
        ap_idle => grp_coefficient_mul2_fu_266_ap_idle,
        ap_ready => grp_coefficient_mul2_fu_266_ap_ready,
        out_r_address0 => grp_coefficient_mul2_fu_266_out_r_address0,
        out_r_ce0 => grp_coefficient_mul2_fu_266_out_r_ce0,
        out_r_we0 => grp_coefficient_mul2_fu_266_out_r_we0,
        out_r_d0 => grp_coefficient_mul2_fu_266_out_r_d0,
        b_address0 => grp_coefficient_mul2_fu_266_b_address0,
        b_ce0 => grp_coefficient_mul2_fu_266_b_ce0,
        b_q0 => grp_coefficient_mul2_fu_266_b_q0,
        c_address0 => grp_coefficient_mul2_fu_266_c_address0,
        c_ce0 => grp_coefficient_mul2_fu_266_c_ce0,
        c_q0 => e1_q0);

    grp_rearrange2_fu_277 : component rearrange2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_rearrange2_fu_277_ap_start,
        ap_done => grp_rearrange2_fu_277_ap_done,
        ap_idle => grp_rearrange2_fu_277_ap_idle,
        ap_ready => grp_rearrange2_fu_277_ap_ready,
        a_address0 => grp_rearrange2_fu_277_a_address0,
        a_ce0 => grp_rearrange2_fu_277_a_ce0,
        a_we0 => grp_rearrange2_fu_277_a_we0,
        a_d0 => grp_rearrange2_fu_277_a_d0,
        a_q0 => c1_q0);

    grp_rearrange2_fu_283 : component rearrange2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_rearrange2_fu_283_ap_start,
        ap_done => grp_rearrange2_fu_283_ap_done,
        ap_idle => grp_rearrange2_fu_283_ap_idle,
        ap_ready => grp_rearrange2_fu_283_ap_ready,
        a_address0 => grp_rearrange2_fu_283_a_address0,
        a_ce0 => grp_rearrange2_fu_283_a_ce0,
        a_we0 => grp_rearrange2_fu_283_a_we0,
        a_d0 => grp_rearrange2_fu_283_a_d0,
        a_q0 => c2_q0);

    RLWE_enc2_mul_53nkbM_U31 : component RLWE_enc2_mul_53nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 53,
        din1_WIDTH => 17,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_360_p0,
        din1 => grp_fu_360_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_360_p2);

    RLWE_enc2_mul_53nkbM_U32 : component RLWE_enc2_mul_53nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 53,
        din1_WIDTH => 17,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_466_p0,
        din1 => grp_fu_466_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_466_p2);

    RLWE_enc2_mul_53nkbM_U33 : component RLWE_enc2_mul_53nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 53,
        din1_WIDTH => 17,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_572_p0,
        din1 => grp_fu_572_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_572_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_coefficient_mul2_fu_266_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_coefficient_mul2_fu_266_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_i2_fu_431_p2 = ap_const_lv1_1)))) then 
                    ap_reg_grp_coefficient_mul2_fu_266_ap_start <= ap_const_logic_1;
                elsif ((grp_coefficient_mul2_fu_266_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_coefficient_mul2_fu_266_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fwd_ntt2_fu_237_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_fwd_ntt2_fu_237_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_fu_325_p2 = ap_const_lv1_1)))) then 
                    ap_reg_grp_fwd_ntt2_fu_237_ap_start <= ap_const_logic_1;
                elsif ((grp_fwd_ntt2_fu_237_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_fwd_ntt2_fu_237_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fwd_ntt2_fu_244_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_fwd_ntt2_fu_244_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_reg_grp_fwd_ntt2_fu_244_ap_start <= ap_const_logic_1;
                elsif ((grp_fwd_ntt2_fu_244_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_fwd_ntt2_fu_244_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_knuth_yao2_fu_251_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_knuth_yao2_fu_251_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_289_p2 = ap_const_lv1_1)))) then 
                    ap_reg_grp_knuth_yao2_fu_251_ap_start <= ap_const_logic_1;
                elsif ((grp_knuth_yao2_fu_251_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_knuth_yao2_fu_251_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_rearrange2_fu_277_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_rearrange2_fu_277_ap_start <= ap_const_logic_0;
            else
                if (((exitcond_i1_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    ap_reg_grp_rearrange2_fu_277_ap_start <= ap_const_logic_1;
                elsif ((grp_rearrange2_fu_277_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_rearrange2_fu_277_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_rearrange2_fu_283_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_rearrange2_fu_283_ap_start <= ap_const_logic_0;
            else
                if (((exitcond_i1_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    ap_reg_grp_rearrange2_fu_283_ap_start <= ap_const_logic_1;
                elsif ((grp_rearrange2_fu_283_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_rearrange2_fu_283_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_193 <= i_4_reg_646;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_193 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_i1_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_i1_reg_215 <= j_5_reg_712;
            elsif (((ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                j_i1_reg_215 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_i2_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j_i2_reg_226 <= j_6_reg_760;
            elsif (((grp_coefficient_mul2_fu_266_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                j_i2_reg_226 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_i_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_i_reg_204 <= j_reg_664;
            elsif (((grp_knuth_yao2_fu_251_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j_i_reg_204 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                a_1_reg_679 <= a_1_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                a_2_reg_727 <= a_2_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                a_3_reg_775 <= a_3_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_i2_fu_431_p2 = ap_const_lv1_0))) then
                c1_addr_reg_722 <= tmp_i3_fu_443_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i1_fu_537_p2 = ap_const_lv1_0))) then
                c2_addr_reg_770 <= tmp_i4_fu_549_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_fu_325_p2 = ap_const_lv1_0))) then
                e3_addr_reg_669 <= tmp_i_fu_337_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_4_reg_646 <= i_4_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                j_5_reg_712 <= j_5_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                j_6_reg_760 <= j_6_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_reg_664 <= j_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                lowbits_l_1_reg_742 <= grp_fu_466_p2(63 downto 32);
                lowbits_r_1_reg_737 <= lowbits_r_1_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                lowbits_l_2_reg_790 <= grp_fu_572_p2(63 downto 32);
                lowbits_r_2_reg_785 <= lowbits_r_2_fu_578_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                lowbits_l_reg_694 <= grp_fu_360_p2(63 downto 32);
                lowbits_r_reg_689 <= lowbits_r_fu_366_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                pp2_4_reg_747 <= pp2_4_fu_498_p2;
                tmp_62_reg_752 <= pp1_1_fu_489_p2(44 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                pp2_6_reg_795 <= pp2_6_fu_604_p2;
                tmp_64_reg_800 <= pp1_2_fu_595_p2(44 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                pp2_reg_699 <= pp2_fu_392_p2;
                tmp_60_reg_704 <= pp1_fu_383_p2(44 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_289_p2 = ap_const_lv1_0))) then
                    tmp_reg_651(8 downto 0) <= tmp_fu_301_p1(8 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_651(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_289_p2, ap_CS_fsm_state9, exitcond_i_fu_325_p2, ap_CS_fsm_state18, exitcond_i2_fu_431_p2, ap_CS_fsm_state25, exitcond_i1_fu_537_p2, grp_fwd_ntt2_fu_237_ap_done, grp_knuth_yao2_fu_251_ap_done, grp_coefficient_mul2_fu_266_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state17, ap_block_state17_on_subcall_done, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_block_state31_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((grp_knuth_yao2_fu_251_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_knuth_yao2_fu_251_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_knuth_yao2_fu_251_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_fu_325_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state15 => 
                if (((grp_fwd_ntt2_fu_237_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_i2_fu_431_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state24 => 
                if (((grp_coefficient_mul2_fu_266_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((exitcond_i1_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state31 => 
                if (((ap_const_boolean_0 = ap_block_state31_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_1_fu_351_p2 <= std_logic_vector(unsigned(tmp_118_i_cast_fu_347_p1) + unsigned(tmp_i_cast_fu_343_p1));
    a_2_fu_457_p2 <= std_logic_vector(unsigned(tmp_116_i_cast_fu_453_p1) + unsigned(tmp_i4_cast_fu_449_p1));
    a_3_fu_563_p2 <= std_logic_vector(unsigned(tmp_116_i20_cast_fu_559_p1) + unsigned(tmp_i17_cast_fu_555_p1));

    a_ce0_assign_proc : process(grp_coefficient_mul2_fu_266_b_ce0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            a_ce0 <= grp_coefficient_mul2_fu_266_b_ce0;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state17_on_subcall_done_assign_proc : process(grp_fwd_ntt2_fu_237_ap_done, grp_fwd_ntt2_fu_244_ap_done, grp_coefficient_mul2_fu_266_ap_done)
    begin
                ap_block_state17_on_subcall_done <= ((grp_coefficient_mul2_fu_266_ap_done = ap_const_logic_0) or (grp_fwd_ntt2_fu_244_ap_done = ap_const_logic_0) or (grp_fwd_ntt2_fu_237_ap_done = ap_const_logic_0));
    end process;


    ap_block_state31_on_subcall_done_assign_proc : process(grp_rearrange2_fu_277_ap_done, grp_rearrange2_fu_283_ap_done)
    begin
                ap_block_state31_on_subcall_done <= ((grp_rearrange2_fu_283_ap_done = ap_const_logic_0) or (grp_rearrange2_fu_277_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state31, ap_block_state31_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state31_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31, ap_block_state31_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state31_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    c1_address0_assign_proc : process(ap_CS_fsm_state18, c1_addr_reg_722, grp_coefficient_mul2_fu_266_out_r_address0, grp_rearrange2_fu_277_a_address0, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state31, tmp_i3_fu_443_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            c1_address0 <= c1_addr_reg_722;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c1_address0 <= tmp_i3_fu_443_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            c1_address0 <= grp_rearrange2_fu_277_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c1_address0 <= grp_coefficient_mul2_fu_266_out_r_address0;
        else 
            c1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c1_ce0_assign_proc : process(ap_CS_fsm_state18, grp_coefficient_mul2_fu_266_out_r_ce0, grp_rearrange2_fu_277_a_ce0, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            c1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            c1_ce0 <= grp_rearrange2_fu_277_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c1_ce0 <= grp_coefficient_mul2_fu_266_out_r_ce0;
        else 
            c1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_d0_assign_proc : process(grp_coefficient_mul2_fu_266_out_r_d0, grp_rearrange2_fu_277_a_d0, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state31, tmp_3_i_i1_fu_532_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            c1_d0 <= tmp_3_i_i1_fu_532_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            c1_d0 <= grp_rearrange2_fu_277_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c1_d0 <= grp_coefficient_mul2_fu_266_out_r_d0;
        else 
            c1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c1_we0_assign_proc : process(grp_coefficient_mul2_fu_266_out_r_we0, grp_rearrange2_fu_277_a_we0, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            c1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            c1_we0 <= grp_rearrange2_fu_277_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c1_we0 <= grp_coefficient_mul2_fu_266_out_r_we0;
        else 
            c1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_address0_assign_proc : process(ap_CS_fsm_state25, exitcond_i1_fu_537_p2, c2_addr_reg_770, grp_coefficient_mul2_fu_266_out_r_address0, grp_rearrange2_fu_283_a_address0, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state31, tmp_i4_fu_549_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            c2_address0 <= c2_addr_reg_770;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i1_fu_537_p2 = ap_const_lv1_0))) then 
            c2_address0 <= tmp_i4_fu_549_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            c2_address0 <= grp_rearrange2_fu_283_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            c2_address0 <= grp_coefficient_mul2_fu_266_out_r_address0;
        else 
            c2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c2_ce0_assign_proc : process(ap_CS_fsm_state25, exitcond_i1_fu_537_p2, grp_coefficient_mul2_fu_266_out_r_ce0, grp_rearrange2_fu_283_a_ce0, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i1_fu_537_p2 = ap_const_lv1_0)))) then 
            c2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            c2_ce0 <= grp_rearrange2_fu_283_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            c2_ce0 <= grp_coefficient_mul2_fu_266_out_r_ce0;
        else 
            c2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_d0_assign_proc : process(grp_coefficient_mul2_fu_266_out_r_d0, grp_rearrange2_fu_283_a_d0, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state31, tmp_3_i_i2_fu_638_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            c2_d0 <= tmp_3_i_i2_fu_638_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            c2_d0 <= grp_rearrange2_fu_283_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            c2_d0 <= grp_coefficient_mul2_fu_266_out_r_d0;
        else 
            c2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c2_we0_assign_proc : process(grp_coefficient_mul2_fu_266_out_r_we0, grp_rearrange2_fu_283_a_we0, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            c2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            c2_we0 <= grp_rearrange2_fu_283_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            c2_we0 <= grp_coefficient_mul2_fu_266_out_r_we0;
        else 
            c2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    e1_address0_assign_proc : process(grp_fwd_ntt2_fu_237_a_address0, grp_knuth_yao2_fu_251_a_address0, grp_coefficient_mul2_fu_266_c_address0, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            e1_address0 <= grp_coefficient_mul2_fu_266_c_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            e1_address0 <= grp_knuth_yao2_fu_251_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            e1_address0 <= grp_fwd_ntt2_fu_237_a_address0;
        else 
            e1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    e1_ce0_assign_proc : process(grp_fwd_ntt2_fu_237_a_ce0, grp_knuth_yao2_fu_251_a_ce0, grp_coefficient_mul2_fu_266_c_ce0, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            e1_ce0 <= grp_coefficient_mul2_fu_266_c_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            e1_ce0 <= grp_knuth_yao2_fu_251_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            e1_ce0 <= grp_fwd_ntt2_fu_237_a_ce0;
        else 
            e1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    e1_ce1_assign_proc : process(grp_fwd_ntt2_fu_237_a_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            e1_ce1 <= grp_fwd_ntt2_fu_237_a_ce1;
        else 
            e1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    e1_d0_assign_proc : process(grp_fwd_ntt2_fu_237_a_d0, grp_knuth_yao2_fu_251_a_d0, ap_CS_fsm_state15, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            e1_d0 <= grp_knuth_yao2_fu_251_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            e1_d0 <= grp_fwd_ntt2_fu_237_a_d0;
        else 
            e1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    e1_we0_assign_proc : process(grp_fwd_ntt2_fu_237_a_we0, grp_knuth_yao2_fu_251_a_we0, ap_CS_fsm_state15, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            e1_we0 <= grp_knuth_yao2_fu_251_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            e1_we0 <= grp_fwd_ntt2_fu_237_a_we0;
        else 
            e1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    e1_we1_assign_proc : process(grp_fwd_ntt2_fu_237_a_we1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            e1_we1 <= grp_fwd_ntt2_fu_237_a_we1;
        else 
            e1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    e2_address0_assign_proc : process(ap_CS_fsm_state18, grp_fwd_ntt2_fu_237_a_address0, grp_knuth_yao2_fu_251_a_address0, ap_CS_fsm_state17, ap_CS_fsm_state6, tmp_i3_fu_443_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            e2_address0 <= tmp_i3_fu_443_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            e2_address0 <= grp_knuth_yao2_fu_251_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e2_address0 <= grp_fwd_ntt2_fu_237_a_address0;
        else 
            e2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    e2_ce0_assign_proc : process(ap_CS_fsm_state18, grp_fwd_ntt2_fu_237_a_ce0, grp_knuth_yao2_fu_251_a_ce0, ap_CS_fsm_state17, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            e2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            e2_ce0 <= grp_knuth_yao2_fu_251_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e2_ce0 <= grp_fwd_ntt2_fu_237_a_ce0;
        else 
            e2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    e2_ce1_assign_proc : process(grp_fwd_ntt2_fu_237_a_ce1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e2_ce1 <= grp_fwd_ntt2_fu_237_a_ce1;
        else 
            e2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    e2_d0_assign_proc : process(grp_fwd_ntt2_fu_237_a_d0, grp_knuth_yao2_fu_251_a_d0, ap_CS_fsm_state17, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            e2_d0 <= grp_knuth_yao2_fu_251_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e2_d0 <= grp_fwd_ntt2_fu_237_a_d0;
        else 
            e2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    e2_we0_assign_proc : process(grp_fwd_ntt2_fu_237_a_we0, grp_knuth_yao2_fu_251_a_we0, ap_CS_fsm_state17, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            e2_we0 <= grp_knuth_yao2_fu_251_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e2_we0 <= grp_fwd_ntt2_fu_237_a_we0;
        else 
            e2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    e2_we1_assign_proc : process(grp_fwd_ntt2_fu_237_a_we1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e2_we1 <= grp_fwd_ntt2_fu_237_a_we1;
        else 
            e2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    e3_address0_assign_proc : process(ap_CS_fsm_state9, e3_addr_reg_669, ap_CS_fsm_state25, grp_fwd_ntt2_fu_244_a_address0, grp_knuth_yao2_fu_251_a_address0, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state17, tmp_i_fu_337_p1, tmp_i4_fu_549_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            e3_address0 <= tmp_i4_fu_549_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            e3_address0 <= e3_addr_reg_669;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            e3_address0 <= tmp_i_fu_337_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            e3_address0 <= grp_knuth_yao2_fu_251_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e3_address0 <= grp_fwd_ntt2_fu_244_a_address0;
        else 
            e3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    e3_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state25, grp_fwd_ntt2_fu_244_a_ce0, grp_knuth_yao2_fu_251_a_ce0, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            e3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            e3_ce0 <= grp_knuth_yao2_fu_251_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e3_ce0 <= grp_fwd_ntt2_fu_244_a_ce0;
        else 
            e3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    e3_ce1_assign_proc : process(grp_fwd_ntt2_fu_244_a_ce1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e3_ce1 <= grp_fwd_ntt2_fu_244_a_ce1;
        else 
            e3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    e3_d0_assign_proc : process(grp_fwd_ntt2_fu_244_a_d0, grp_knuth_yao2_fu_251_a_d0, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state17, tmp_3_i_i_fu_426_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            e3_d0 <= tmp_3_i_i_fu_426_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            e3_d0 <= grp_knuth_yao2_fu_251_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e3_d0 <= grp_fwd_ntt2_fu_244_a_d0;
        else 
            e3_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    e3_we0_assign_proc : process(grp_fwd_ntt2_fu_244_a_we0, grp_knuth_yao2_fu_251_a_we0, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            e3_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            e3_we0 <= grp_knuth_yao2_fu_251_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e3_we0 <= grp_fwd_ntt2_fu_244_a_we0;
        else 
            e3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    e3_we1_assign_proc : process(grp_fwd_ntt2_fu_244_a_we1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            e3_we1 <= grp_fwd_ntt2_fu_244_a_we1;
        else 
            e3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    encoded_m_address0_assign_proc : process(tmp_reg_651, ap_CS_fsm_state9, ap_CS_fsm_state3, tmp_i_fu_337_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            encoded_m_address0 <= tmp_i_fu_337_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            encoded_m_address0 <= tmp_reg_651(8 - 1 downto 0);
        else 
            encoded_m_address0 <= "XXXXXXXX";
        end if; 
    end process;


    encoded_m_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            encoded_m_ce0 <= ap_const_logic_1;
        else 
            encoded_m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    encoded_m_d0 <= std_logic_vector(unsigned(tmp_108_fu_306_p2) - unsigned(tmp_109_fu_312_p2));

    encoded_m_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            encoded_m_we0 <= ap_const_logic_1;
        else 
            encoded_m_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_289_p2 <= "1" when (i_reg_193 = ap_const_lv9_100) else "0";
    exitcond_i1_fu_537_p2 <= "1" when (j_i2_reg_226 = ap_const_lv9_100) else "0";
    exitcond_i2_fu_431_p2 <= "1" when (j_i1_reg_215 = ap_const_lv9_100) else "0";
    exitcond_i_fu_325_p2 <= "1" when (j_i_reg_204 = ap_const_lv9_100) else "0";
    grp_coefficient_mul2_fu_266_ap_start <= ap_reg_grp_coefficient_mul2_fu_266_ap_start;

    grp_coefficient_mul2_fu_266_b_q0_assign_proc : process(a_q0, p_q0, ap_CS_fsm_state17, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_coefficient_mul2_fu_266_b_q0 <= p_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_coefficient_mul2_fu_266_b_q0 <= a_q0;
        else 
            grp_coefficient_mul2_fu_266_b_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_360_p0 <= ap_const_lv64_8883FB99BF246(53 - 1 downto 0);
    grp_fu_360_p1 <= grp_fu_360_p10(17 - 1 downto 0);
    grp_fu_360_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_1_reg_679),64));
    grp_fu_466_p0 <= ap_const_lv64_8883FB99BF246(53 - 1 downto 0);
    grp_fu_466_p1 <= grp_fu_466_p10(17 - 1 downto 0);
    grp_fu_466_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_2_reg_727),64));
    grp_fu_572_p0 <= ap_const_lv64_8883FB99BF246(53 - 1 downto 0);
    grp_fu_572_p1 <= grp_fu_572_p10(17 - 1 downto 0);
    grp_fu_572_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_3_reg_775),64));

    grp_fwd_ntt2_fu_237_a_q0_assign_proc : process(e1_q0, e2_q0, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fwd_ntt2_fu_237_a_q0 <= e2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fwd_ntt2_fu_237_a_q0 <= e1_q0;
        else 
            grp_fwd_ntt2_fu_237_a_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fwd_ntt2_fu_237_a_q1_assign_proc : process(e1_q1, e2_q1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fwd_ntt2_fu_237_a_q1 <= e2_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fwd_ntt2_fu_237_a_q1 <= e1_q1;
        else 
            grp_fwd_ntt2_fu_237_a_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fwd_ntt2_fu_237_ap_start <= ap_reg_grp_fwd_ntt2_fu_237_ap_start;
    grp_fwd_ntt2_fu_244_ap_start <= ap_reg_grp_fwd_ntt2_fu_244_ap_start;
    grp_knuth_yao2_fu_251_ap_start <= ap_reg_grp_knuth_yao2_fu_251_ap_start;
    grp_rearrange2_fu_277_ap_start <= ap_reg_grp_rearrange2_fu_277_ap_start;
    grp_rearrange2_fu_283_ap_start <= ap_reg_grp_rearrange2_fu_283_ap_start;
    i_4_fu_295_p2 <= std_logic_vector(unsigned(i_reg_193) + unsigned(ap_const_lv9_1));
    j_5_fu_437_p2 <= std_logic_vector(unsigned(j_i1_reg_215) + unsigned(ap_const_lv9_1));
    j_6_fu_543_p2 <= std_logic_vector(unsigned(j_i2_reg_226) + unsigned(ap_const_lv9_1));
    j_fu_331_p2 <= std_logic_vector(unsigned(j_i_reg_204) + unsigned(ap_const_lv9_1));
    lowbits_r_1_fu_472_p1 <= grp_fu_466_p2(32 - 1 downto 0);
    lowbits_r_2_fu_578_p1 <= grp_fu_572_p2(32 - 1 downto 0);
    lowbits_r_fu_366_p1 <= grp_fu_360_p2(32 - 1 downto 0);
    m_address0 <= tmp_fu_301_p1(8 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ce0_assign_proc : process(grp_coefficient_mul2_fu_266_b_ce0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            p_ce0 <= grp_coefficient_mul2_fu_266_b_ce0;
        else 
            p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pp1_1_fu_489_p1 <= pp1_1_fu_489_p10(32 - 1 downto 0);
    pp1_1_fu_489_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_r_1_reg_737),45));
    pp1_1_fu_489_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp1_1_fu_489_p1), 45));
    pp1_2_fu_595_p1 <= pp1_2_fu_595_p10(32 - 1 downto 0);
    pp1_2_fu_595_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_r_2_reg_785),45));
    pp1_2_fu_595_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp1_2_fu_595_p1), 45));
    pp1_3_i33_cast_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_reg_800),45));
    pp1_3_i_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_reg_752),45));
    pp1_4_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_reg_704),45));
    pp1_fu_383_p1 <= pp1_fu_383_p10(32 - 1 downto 0);
    pp1_fu_383_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_r_reg_689),45));
    pp1_fu_383_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp1_fu_383_p1), 45));
    pp2_3_fu_411_p2 <= std_logic_vector(unsigned(pp1_4_cast_fu_408_p1) + unsigned(pp2_reg_699));
    pp2_4_fu_498_p1 <= pp2_4_fu_498_p10(32 - 1 downto 0);
    pp2_4_fu_498_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_l_1_reg_742),45));
    pp2_4_fu_498_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp2_4_fu_498_p1), 45));
    pp2_5_fu_517_p2 <= std_logic_vector(unsigned(pp1_3_i_cast_fu_514_p1) + unsigned(pp2_4_reg_747));
    pp2_6_fu_604_p1 <= pp2_6_fu_604_p10(32 - 1 downto 0);
    pp2_6_fu_604_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_l_2_reg_790),45));
    pp2_6_fu_604_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp2_6_fu_604_p1), 45));
    pp2_7_fu_623_p2 <= std_logic_vector(unsigned(pp1_3_i33_cast_fu_620_p1) + unsigned(pp2_6_reg_795));
    pp2_fu_392_p1 <= pp2_fu_392_p10(32 - 1 downto 0);
    pp2_fu_392_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_l_reg_694),45));
    pp2_fu_392_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp2_fu_392_p1), 45));
    tmp_108_fu_306_p2 <= std_logic_vector(shift_left(unsigned(m_q0),to_integer(unsigned('0' & ap_const_lv16_C(16-1 downto 0)))));
    tmp_109_fu_312_p2 <= std_logic_vector(shift_left(unsigned(m_q0),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    tmp_116_i20_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_q0),17));
    tmp_116_i_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c1_q0),17));
    tmp_118_i_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(encoded_m_q0),17));
    tmp_3_i_i1_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_522_p4),16));
    tmp_3_i_i2_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_628_p4),16));
    tmp_3_i_i_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_416_p4),16));
    tmp_61_fu_416_p4 <= pp2_3_fu_411_p2(44 downto 32);
    tmp_63_fu_522_p4 <= pp2_5_fu_517_p2(44 downto 32);
    tmp_65_fu_628_p4 <= pp2_7_fu_623_p2(44 downto 32);
    tmp_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_193),64));
    tmp_i17_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e3_q0),17));
    tmp_i3_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i1_reg_215),64));
    tmp_i4_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e2_q0),17));
    tmp_i4_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i2_reg_226),64));
    tmp_i_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e3_q0),17));
    tmp_i_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_204),64));
end behav;
