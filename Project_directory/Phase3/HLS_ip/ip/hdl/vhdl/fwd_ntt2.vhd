-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_ntt2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_we1 : OUT STD_LOGIC;
    a_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fwd_ntt2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_429 : STD_LOGIC_VECTOR (14 downto 0) := "000010000101001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv30_13FE : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001001111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal primrt_omega_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal primrt_omega_table_ce0 : STD_LOGIC;
    signal primrt_omega_table_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal primrt_omega_table_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal primrt_omega_table_ce1 : STD_LOGIC;
    signal primrt_omega_table_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_mod_r_fu_209_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_233 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_mod_r_fu_209_ap_done : STD_LOGIC;
    signal grp_mod_r_fu_214_ap_done : STD_LOGIC;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_mod_r_fu_219_ap_done : STD_LOGIC;
    signal grp_mod_r_fu_224_ap_done : STD_LOGIC;
    signal ap_block_state11_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_state22_on_subcall_done : BOOLEAN;
    signal grp_mod_r_fu_214_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_237 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_3_fu_248_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_671 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal primrt_cast_fu_264_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal primrt_cast_reg_686 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal primrt_omega_table_l_2_fu_268_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_1_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_348_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_0_in_cast_fu_356_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_0_in_cast_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_addr_6_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_7_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_8_reg_730 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_9_reg_736 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_2_fu_639_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_2_reg_746 : STD_LOGIC_VECTOR (28 downto 0);
    signal j_3_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_load_6_reg_756 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_72_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_cast_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_cast_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_107_cast_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_cast_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_cast_fu_507_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_cast_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_cast_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_cast_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_219_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_79_reg_791 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mod_r_fu_224_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_81_reg_796 : STD_LOGIC_VECTOR (14 downto 0);
    signal omega_4_cast_fu_541_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_4_cast_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal omega_1_cast_fu_545_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_1_cast_reg_811 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal j_2_fu_555_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_reg_820 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_fu_561_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_reg_825 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_reg_830 : STD_LOGIC_VECTOR (7 downto 0);
    signal t1_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal omega_fu_662_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal omega_reg_841 : STD_LOGIC_VECTOR (29 downto 0);
    signal omega_2_cast_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_2_cast_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal a_addr_5_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_84_cast_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_cast_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_86_cast_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_cast_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_867 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mod_r_fu_209_ap_start : STD_LOGIC;
    signal grp_mod_r_fu_209_ap_idle : STD_LOGIC;
    signal grp_mod_r_fu_209_ap_ready : STD_LOGIC;
    signal grp_mod_r_fu_209_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_214_ap_start : STD_LOGIC;
    signal grp_mod_r_fu_214_ap_idle : STD_LOGIC;
    signal grp_mod_r_fu_214_ap_ready : STD_LOGIC;
    signal grp_mod_r_fu_214_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_219_ap_start : STD_LOGIC;
    signal grp_mod_r_fu_219_ap_idle : STD_LOGIC;
    signal grp_mod_r_fu_219_ap_ready : STD_LOGIC;
    signal grp_mod_r_fu_224_ap_start : STD_LOGIC;
    signal grp_mod_r_fu_224_ap_idle : STD_LOGIC;
    signal grp_mod_r_fu_224_ap_ready : STD_LOGIC;
    signal m_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_0_in_reg_167 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j_1_reg_187 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal omega_1_reg_198 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_grp_mod_r_fu_209_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_reg_grp_mod_r_fu_214_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_mod_r_fu_219_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_mod_r_fu_224_ap_start : STD_LOGIC := '0';
    signal tmp_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_trunc_ext_fu_523_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc4_ext_fu_528_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc5_ext_fu_533_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc6_ext_fu_537_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc7_ext_fu_630_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_trunc8_ext_fu_635_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_op_op7_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_306_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_97_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_316_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_98_fu_322_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_96_fu_278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_332_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_100_fu_340_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_104_fu_365_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_60_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_2_trunc_ext_fu_459_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t2_trunc_ext_fu_471_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_2_cast_fu_463_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal u1_1_cast_fu_455_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_74_fu_479_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal t2_cast_fu_475_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal u2_cast_fu_467_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_76_fu_490_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_78_fu_501_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_80_fu_512_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_50_fu_567_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal t1_1_trunc_ext_fu_596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal u1_cast_fu_604_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal t1_1_cast_fu_600_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_55_fu_608_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_57_fu_619_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal omega_2_fu_639_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal omega_2_fu_639_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_644_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_644_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega2_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_650_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_72_fu_650_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_fu_656_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_fu_656_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_fu_662_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal omega_fu_662_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal omega_2_fu_639_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_fu_662_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal t1_fu_656_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_656_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_644_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_650_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component mod_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component RLWE_enc2_mul_mulhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component RLWE_enc2_mul_mulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component RLWE_enc2_mul_muljbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component fwd_ntt2_primrt_og8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    primrt_omega_table_U : component fwd_ntt2_primrt_og8j
    generic map (
        DataWidth => 13,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => primrt_omega_table_address0,
        ce0 => primrt_omega_table_ce0,
        q0 => primrt_omega_table_q0,
        address1 => primrt_omega_table_address1,
        ce1 => primrt_omega_table_ce1,
        q1 => primrt_omega_table_q1);

    grp_mod_r_fu_209 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mod_r_fu_209_ap_start,
        ap_done => grp_mod_r_fu_209_ap_done,
        ap_idle => grp_mod_r_fu_209_ap_idle,
        ap_ready => grp_mod_r_fu_209_ap_ready,
        x => grp_mod_r_fu_209_x,
        ap_return => grp_mod_r_fu_209_ap_return);

    grp_mod_r_fu_214 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mod_r_fu_214_ap_start,
        ap_done => grp_mod_r_fu_214_ap_done,
        ap_idle => grp_mod_r_fu_214_ap_idle,
        ap_ready => grp_mod_r_fu_214_ap_ready,
        x => grp_mod_r_fu_214_x,
        ap_return => grp_mod_r_fu_214_ap_return);

    grp_mod_r_fu_219 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mod_r_fu_219_ap_start,
        ap_done => grp_mod_r_fu_219_ap_done,
        ap_idle => grp_mod_r_fu_219_ap_idle,
        ap_ready => grp_mod_r_fu_219_ap_ready,
        x => tmp_109_cast_reg_781,
        ap_return => grp_mod_r_fu_219_ap_return);

    grp_mod_r_fu_224 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mod_r_fu_224_ap_start,
        ap_done => grp_mod_r_fu_224_ap_done,
        ap_idle => grp_mod_r_fu_224_ap_idle,
        ap_ready => grp_mod_r_fu_224_ap_ready,
        x => tmp_111_cast_reg_786,
        ap_return => grp_mod_r_fu_224_ap_return);

    RLWE_enc2_mul_mulhbi_U15 : component RLWE_enc2_mul_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => omega_2_fu_639_p0,
        din1 => omega_2_fu_639_p1,
        dout => omega_2_fu_639_p2);

    RLWE_enc2_mul_mulibs_U16 : component RLWE_enc2_mul_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_65_fu_644_p0,
        din1 => tmp_65_fu_644_p1,
        dout => tmp_65_fu_644_p2);

    RLWE_enc2_mul_mulibs_U17 : component RLWE_enc2_mul_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_72_fu_650_p0,
        din1 => tmp_72_fu_650_p1,
        dout => tmp_72_fu_650_p2);

    RLWE_enc2_mul_mulibs_U18 : component RLWE_enc2_mul_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => t1_fu_656_p0,
        din1 => t1_fu_656_p1,
        dout => t1_fu_656_p2);

    RLWE_enc2_mul_muljbC_U19 : component RLWE_enc2_mul_muljbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => omega_fu_662_p0,
        din1 => omega_fu_662_p1,
        dout => omega_fu_662_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_mod_r_fu_209_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mod_r_fu_209_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_reg_grp_mod_r_fu_209_ap_start <= ap_const_logic_1;
                elsif ((grp_mod_r_fu_209_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mod_r_fu_209_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_mod_r_fu_214_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mod_r_fu_214_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_reg_grp_mod_r_fu_214_ap_start <= ap_const_logic_1;
                elsif ((grp_mod_r_fu_214_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mod_r_fu_214_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_mod_r_fu_219_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mod_r_fu_219_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_reg_grp_mod_r_fu_219_ap_start <= ap_const_logic_1;
                elsif ((grp_mod_r_fu_219_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mod_r_fu_219_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_mod_r_fu_224_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mod_r_fu_224_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_reg_grp_mod_r_fu_224_ap_start <= ap_const_logic_1;
                elsif ((grp_mod_r_fu_224_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mod_r_fu_224_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_102_fu_360_p2 = ap_const_lv1_1))) then 
                i_reg_144 <= i_3_reg_671;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_144 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_242_p2 = ap_const_lv1_1))) then 
                j_1_reg_187 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_1_reg_187 <= j_2_reg_820;
            end if; 
        end if;
    end process;

    j_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_mod_r_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j_reg_155 <= j_3_reg_751;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_155 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_102_fu_360_p2 = ap_const_lv1_0))) then 
                k_reg_176 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_reg_176 <= k_1_reg_741;
            end if; 
        end if;
    end process;

    m_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_102_fu_360_p2 = ap_const_lv1_1))) then 
                                m_reg_132(31 downto 1) <= m_1_reg_696(31 downto 1);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_reg_132(1) <= '1';
                m_reg_132(2) <= '0';
                m_reg_132(3) <= '0';
                m_reg_132(4) <= '0';
                m_reg_132(5) <= '0';
                m_reg_132(6) <= '0';
                m_reg_132(7) <= '0';
                m_reg_132(8) <= '0';
                m_reg_132(9) <= '0';
                m_reg_132(10) <= '0';
                m_reg_132(11) <= '0';
                m_reg_132(12) <= '0';
                m_reg_132(13) <= '0';
                m_reg_132(14) <= '0';
                m_reg_132(15) <= '0';
                m_reg_132(16) <= '0';
                m_reg_132(17) <= '0';
                m_reg_132(18) <= '0';
                m_reg_132(19) <= '0';
                m_reg_132(20) <= '0';
                m_reg_132(21) <= '0';
                m_reg_132(22) <= '0';
                m_reg_132(23) <= '0';
                m_reg_132(24) <= '0';
                m_reg_132(25) <= '0';
                m_reg_132(26) <= '0';
                m_reg_132(27) <= '0';
                m_reg_132(28) <= '0';
                m_reg_132(29) <= '0';
                m_reg_132(30) <= '0';
                m_reg_132(31) <= '0';
            end if; 
        end if;
    end process;

    omega_0_in_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_mod_r_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                omega_0_in_reg_167 <= grp_mod_r_fu_209_ap_return;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                omega_0_in_reg_167 <= primrt_omega_table_l_2_fu_268_p1;
            end if; 
        end if;
    end process;

    omega_1_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_242_p2 = ap_const_lv1_1))) then 
                omega_1_reg_198 <= ap_const_lv15_429;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                omega_1_reg_198 <= reg_237;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done))) then
                    a_addr_5_reg_851(7 downto 1) <= tmp_54_fu_592_p1(8 - 1 downto 0)(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_fu_375_p2 = ap_const_lv1_1))) then
                a_addr_6_reg_719 <= tmp_61_fu_387_p1(8 - 1 downto 0);
                    a_addr_7_reg_724(7 downto 1) <= tmp_63_fu_398_p1(8 - 1 downto 0)(7 downto 1);
                a_addr_8_reg_730 <= tmp_68_fu_415_p1(8 - 1 downto 0);
                    a_addr_9_reg_736(7 downto 1) <= tmp_70_fu_426_p1(8 - 1 downto 0)(7 downto 1);
                k_1_reg_741 <= k_1_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_549_p2 = ap_const_lv1_0))) then
                    a_addr_reg_830(7 downto 1) <= tmp_51_fu_573_p1(8 - 1 downto 0)(7 downto 1);
                    tmp_103_reg_825(7 downto 1) <= tmp_103_fu_561_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                a_load_6_reg_756 <= a_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_671 <= i_3_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                j_2_reg_820 <= j_2_fu_555_p2;
                omega_1_cast_reg_811 <= omega_1_cast_fu_545_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_fu_375_p2 = ap_const_lv1_0))) then
                j_3_reg_751 <= j_3_fu_439_p2;
                omega_2_reg_746 <= omega_2_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    m_1_reg_696(31 downto 2) <= m_1_fu_272_p2(31 downto 2);
                    primrt_cast_reg_686(12 downto 0) <= primrt_cast_fu_264_p1(12 downto 0);
                    tmp_101_reg_702(31 downto 1) <= tmp_101_fu_348_p3(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                omega_0_in_cast_reg_707 <= omega_0_in_cast_fu_356_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    omega_2_cast_reg_846(29 downto 0) <= omega_2_cast_fu_588_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    omega_4_cast_reg_801(28 downto 0) <= omega_4_cast_fu_541_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                omega_reg_841 <= omega_fu_662_p2;
                t1_reg_836 <= t1_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_229 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_boolean_0 = ap_block_state22_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11_on_subcall_done)))) then
                reg_233 <= grp_mod_r_fu_209_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11_on_subcall_done)))) then
                reg_237 <= grp_mod_r_fu_214_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    tmp_105_cast_reg_771(16 downto 0) <= tmp_105_cast_fu_485_p1(16 downto 0);
                    tmp_107_cast_reg_776(16 downto 0) <= tmp_107_cast_fu_496_p1(16 downto 0);
                tmp_109_cast_reg_781 <= tmp_109_cast_fu_507_p1;
                tmp_111_cast_reg_786 <= tmp_111_cast_fu_518_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_boolean_0 = ap_block_state22_on_subcall_done))) then
                tmp_58_reg_867 <= grp_mod_r_fu_214_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_65_reg_761 <= tmp_65_fu_644_p2;
                tmp_72_reg_766 <= tmp_72_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11_on_subcall_done))) then
                tmp_79_reg_791 <= grp_mod_r_fu_219_ap_return;
                tmp_81_reg_796 <= grp_mod_r_fu_224_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    tmp_84_cast_reg_857(16 downto 0) <= tmp_84_cast_fu_614_p1(16 downto 0);
                tmp_86_cast_reg_862 <= tmp_86_cast_fu_625_p1;
            end if;
        end if;
    end process;
    primrt_cast_reg_686(28 downto 13) <= "0000000000000000";
    m_1_reg_696(1 downto 0) <= "00";
    tmp_101_reg_702(0) <= '0';
    a_addr_7_reg_724(0) <= '1';
    a_addr_9_reg_736(0) <= '1';
    tmp_105_cast_reg_771(31 downto 17) <= "000000000000000";
    tmp_107_cast_reg_776(31 downto 17) <= "000000000000000";
    omega_4_cast_reg_801(31 downto 29) <= "000";
    tmp_103_reg_825(0) <= '0';
    a_addr_reg_830(0) <= '1';
    omega_2_cast_reg_846(31 downto 30) <= "00";
    a_addr_5_reg_851(0) <= '0';
    tmp_84_cast_reg_857(31 downto 17) <= "000000000000000";
    m_reg_132(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, grp_mod_r_fu_209_ap_done, ap_block_state9_on_subcall_done, ap_CS_fsm_state11, ap_block_state11_on_subcall_done, ap_CS_fsm_state20, ap_block_state20_on_subcall_done, ap_CS_fsm_state22, ap_block_state22_on_subcall_done, ap_CS_fsm_state2, exitcond1_fu_242_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_fu_375_p2, ap_CS_fsm_state15, ap_CS_fsm_state16, exitcond_fu_549_p2, tmp_102_fu_360_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_242_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_102_fu_360_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_fu_375_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_mod_r_fu_209_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_549_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_boolean_0 = ap_block_state22_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state9, a_addr_6_reg_719, ap_CS_fsm_state5, a_addr_8_reg_730, ap_CS_fsm_state16, a_addr_5_reg_851, ap_CS_fsm_state13, ap_CS_fsm_state23, tmp_63_fu_398_p1, tmp_51_fu_573_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            a_address0 <= a_addr_5_reg_851;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            a_address0 <= tmp_51_fu_573_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_address0 <= a_addr_8_reg_730;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            a_address0 <= a_addr_6_reg_719;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= tmp_63_fu_398_p1(8 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state20, ap_CS_fsm_state5, a_addr_7_reg_724, a_addr_8_reg_730, a_addr_9_reg_736, a_addr_reg_830, ap_CS_fsm_state13, ap_CS_fsm_state23, tmp_70_fu_426_p1, tmp_54_fu_592_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            a_address1 <= a_addr_reg_830;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_address1 <= tmp_54_fu_592_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_address1 <= a_addr_9_reg_736;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_address1 <= a_addr_7_reg_724;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a_address1 <= a_addr_8_reg_730;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address1 <= tmp_70_fu_426_p1(8 - 1 downto 0);
        else 
            a_address1 <= "XXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state9, ap_block_state9_on_subcall_done, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state9, ap_block_state9_on_subcall_done, ap_CS_fsm_state20, ap_block_state20_on_subcall_done, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state12, p_trunc_ext_fu_523_p1, p_trunc5_ext_fu_533_p1, p_trunc7_ext_fu_630_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            a_d0 <= p_trunc7_ext_fu_630_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_d0 <= p_trunc5_ext_fu_533_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_d0 <= p_trunc_ext_fu_523_p1;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_d1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state12, p_trunc4_ext_fu_528_p1, p_trunc6_ext_fu_537_p1, p_trunc8_ext_fu_635_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            a_d1 <= p_trunc8_ext_fu_635_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_d1 <= p_trunc6_ext_fu_537_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_d1 <= p_trunc4_ext_fu_528_p1;
        else 
            a_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            a_we1 <= ap_const_logic_1;
        else 
            a_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_on_subcall_done_assign_proc : process(grp_mod_r_fu_209_ap_done, grp_mod_r_fu_214_ap_done, grp_mod_r_fu_219_ap_done, grp_mod_r_fu_224_ap_done)
    begin
                ap_block_state11_on_subcall_done <= ((grp_mod_r_fu_214_ap_done = ap_const_logic_0) or (grp_mod_r_fu_209_ap_done = ap_const_logic_0) or (grp_mod_r_fu_224_ap_done = ap_const_logic_0) or (grp_mod_r_fu_219_ap_done = ap_const_logic_0));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(grp_mod_r_fu_209_ap_done, grp_mod_r_fu_214_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((grp_mod_r_fu_214_ap_done = ap_const_logic_0) or (grp_mod_r_fu_209_ap_done = ap_const_logic_0));
    end process;


    ap_block_state22_on_subcall_done_assign_proc : process(grp_mod_r_fu_209_ap_done, grp_mod_r_fu_214_ap_done)
    begin
                ap_block_state22_on_subcall_done <= ((grp_mod_r_fu_214_ap_done = ap_const_logic_0) or (grp_mod_r_fu_209_ap_done = ap_const_logic_0));
    end process;


    ap_block_state9_on_subcall_done_assign_proc : process(grp_mod_r_fu_209_ap_done, grp_mod_r_fu_214_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_mod_r_fu_214_ap_done = ap_const_logic_0) or (grp_mod_r_fu_209_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16, exitcond_fu_549_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_549_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, exitcond_fu_549_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_549_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_242_p2 <= "1" when (i_reg_144 = ap_const_lv3_7) else "0";
    exitcond_fu_549_p2 <= "1" when (j_1_reg_187 = ap_const_lv8_80) else "0";
    grp_mod_r_fu_209_ap_start <= ap_reg_grp_mod_r_fu_209_ap_start;

    grp_mod_r_fu_209_x_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state22, tmp_65_reg_761, tmp_105_cast_reg_771, omega_4_cast_reg_801, ap_CS_fsm_state15, t1_reg_836, tmp_84_cast_reg_857)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_mod_r_fu_209_x <= tmp_84_cast_reg_857;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_mod_r_fu_209_x <= t1_reg_836;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_mod_r_fu_209_x <= omega_4_cast_reg_801;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_mod_r_fu_209_x <= tmp_105_cast_reg_771;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_mod_r_fu_209_x <= tmp_65_reg_761;
        else 
            grp_mod_r_fu_209_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_mod_r_fu_214_ap_start <= ap_reg_grp_mod_r_fu_214_ap_start;

    grp_mod_r_fu_214_x_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state22, tmp_72_reg_766, tmp_107_cast_reg_776, omega_2_cast_reg_846, tmp_86_cast_reg_862)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_mod_r_fu_214_x <= tmp_86_cast_reg_862;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_mod_r_fu_214_x <= omega_2_cast_reg_846;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_mod_r_fu_214_x <= tmp_107_cast_reg_776;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_mod_r_fu_214_x <= tmp_72_reg_766;
        else 
            grp_mod_r_fu_214_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_mod_r_fu_219_ap_start <= ap_reg_grp_mod_r_fu_219_ap_start;
    grp_mod_r_fu_224_ap_start <= ap_reg_grp_mod_r_fu_224_ap_start;
    i_3_fu_248_p2 <= std_logic_vector(unsigned(i_reg_144) + unsigned(ap_const_lv3_1));
    icmp_fu_375_p2 <= "1" when (signed(tmp_104_fu_365_p4) < signed(ap_const_lv24_1)) else "0";
    j_2_fu_555_p2 <= std_logic_vector(unsigned(j_1_reg_187) + unsigned(ap_const_lv8_1));
    j_3_fu_439_p2 <= std_logic_vector(unsigned(j_reg_155) + unsigned(ap_const_lv32_2));
    k_1_fu_431_p2 <= std_logic_vector(unsigned(m_1_reg_696) + unsigned(k_reg_176));
    m_1_fu_272_p2 <= std_logic_vector(shift_left(unsigned(m_reg_132),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    m_op_op7_fu_286_p2 <= (m_reg_132 or ap_const_lv32_1);
    omega2_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_0_in_cast_reg_707),32));
        omega_0_in_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(omega_0_in_reg_167),16));

        omega_1_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(omega_1_reg_198),16));

    omega_2_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_reg_841),32));
    omega_2_fu_639_p0 <= primrt_cast_reg_686(13 - 1 downto 0);
    omega_2_fu_639_p1 <= omega_2_fu_639_p10(16 - 1 downto 0);
    omega_2_fu_639_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_0_in_cast_reg_707),29));
    omega_4_cast_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_2_reg_746),32));
    omega_fu_662_p0 <= ap_const_lv30_13FE(14 - 1 downto 0);
    omega_fu_662_p1 <= omega_fu_662_p10(16 - 1 downto 0);
    omega_fu_662_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_1_cast_reg_811),30));
    p_lshr_fu_306_p4 <= p_neg_fu_300_p2(31 downto 1);
    p_neg_fu_300_p2 <= (m_reg_132 xor ap_const_lv32_FFFFFFFF);
    p_neg_t_fu_316_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_306_p4));
        p_trunc4_ext_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_237),16));

        p_trunc5_ext_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_79_reg_791),16));

        p_trunc6_ext_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_81_reg_796),16));

        p_trunc7_ext_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_233),16));

        p_trunc8_ext_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_reg_867),16));

        p_trunc_ext_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_233),16));

    primrt_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(primrt_omega_table_q0),29));
    primrt_omega_table_address0 <= tmp_fu_254_p1(3 - 1 downto 0);
    primrt_omega_table_address1 <= tmp_s_fu_259_p1(3 - 1 downto 0);

    primrt_omega_table_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            primrt_omega_table_ce0 <= ap_const_logic_1;
        else 
            primrt_omega_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    primrt_omega_table_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            primrt_omega_table_ce1 <= ap_const_logic_1;
        else 
            primrt_omega_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    primrt_omega_table_l_2_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(primrt_omega_table_q1),15));
    t1_1_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_1_trunc_ext_fu_596_p1),17));
        t1_1_trunc_ext_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_233),16));

    t1_2_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_2_trunc_ext_fu_459_p1),17));
        t1_2_trunc_ext_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_233),16));

    t1_fu_656_p0 <= t1_fu_656_p00(16 - 1 downto 0);
    t1_fu_656_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_229),32));
    t1_fu_656_p1 <= t1_fu_656_p10(16 - 1 downto 0);
    t1_fu_656_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_1_cast_reg_811),32));
    t2_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t2_trunc_ext_fu_471_p1),17));
        t2_trunc_ext_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_237),16));

    tmp1_fu_403_p2 <= std_logic_vector(unsigned(m_reg_132) + unsigned(k_reg_176));
    tmp_100_fu_340_p3 <= 
        ap_const_lv31_0 when (tmp_96_fu_278_p3(0) = '1') else 
        tmp_99_fu_332_p3;
    tmp_101_fu_348_p3 <= (tmp_100_fu_340_p3 & ap_const_lv1_0);
    tmp_102_fu_360_p2 <= "1" when (j_reg_155 = tmp_101_reg_702) else "0";
    tmp_103_fu_561_p2 <= std_logic_vector(shift_left(unsigned(j_1_reg_187),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_104_fu_365_p4 <= k_reg_176(31 downto 8);
    tmp_105_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_fu_479_p2),32));
    tmp_107_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_490_p2),32));
        tmp_109_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_78_fu_501_p2),32));

        tmp_111_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_80_fu_512_p2),32));

    tmp_50_fu_567_p2 <= (tmp_103_fu_561_p2 or ap_const_lv8_1);
    tmp_51_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_567_p2),64));
    tmp_54_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_reg_825),64));
    tmp_55_fu_608_p2 <= std_logic_vector(unsigned(u1_cast_fu_604_p1) + unsigned(t1_1_cast_fu_600_p1));
    tmp_57_fu_619_p2 <= std_logic_vector(unsigned(u1_cast_fu_604_p1) - unsigned(t1_1_cast_fu_600_p1));
    tmp_60_fu_381_p2 <= std_logic_vector(unsigned(k_reg_176) + unsigned(j_reg_155));
        tmp_61_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_60_fu_381_p2),64));

    tmp_62_fu_392_p2 <= (tmp_60_fu_381_p2 or ap_const_lv32_1);
        tmp_63_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_62_fu_392_p2),64));

    tmp_65_fu_644_p0 <= tmp_65_fu_644_p00(16 - 1 downto 0);
    tmp_65_fu_644_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_229),32));
    tmp_65_fu_644_p1 <= omega2_fu_449_p1(16 - 1 downto 0);
    tmp_67_fu_409_p2 <= std_logic_vector(unsigned(tmp1_fu_403_p2) + unsigned(j_reg_155));
        tmp_68_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_67_fu_409_p2),64));

    tmp_69_fu_420_p2 <= (tmp_67_fu_409_p2 or ap_const_lv32_1);
        tmp_70_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_69_fu_420_p2),64));

    tmp_72_fu_650_p0 <= tmp_72_fu_650_p00(16 - 1 downto 0);
    tmp_72_fu_650_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_6_reg_756),32));
    tmp_72_fu_650_p1 <= omega2_fu_449_p1(16 - 1 downto 0);
    tmp_74_fu_479_p2 <= std_logic_vector(unsigned(t1_2_cast_fu_463_p1) + unsigned(u1_1_cast_fu_455_p1));
    tmp_76_fu_490_p2 <= std_logic_vector(unsigned(t2_cast_fu_475_p1) + unsigned(u2_cast_fu_467_p1));
    tmp_78_fu_501_p2 <= std_logic_vector(unsigned(u1_1_cast_fu_455_p1) - unsigned(t1_2_cast_fu_463_p1));
    tmp_80_fu_512_p2 <= std_logic_vector(unsigned(u2_cast_fu_467_p1) - unsigned(t2_cast_fu_475_p1));
    tmp_84_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_608_p2),32));
        tmp_86_cast_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_fu_619_p2),32));

    tmp_96_fu_278_p3 <= m_reg_132(31 downto 31);
    tmp_97_fu_292_p3 <= m_op_op7_fu_286_p2(31 downto 31);
    tmp_98_fu_322_p4 <= m_op_op7_fu_286_p2(31 downto 1);
    tmp_99_fu_332_p3 <= 
        p_neg_t_fu_316_p2 when (tmp_97_fu_292_p3(0) = '1') else 
        tmp_98_fu_322_p4;
    tmp_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_144),64));
    tmp_s_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_fu_248_p2),64));
    u1_1_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),17));
    u1_cast_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q1),17));
    u2_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q1),17));
end behav;
