-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity coefficient_mul2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of coefficient_mul2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv64_8883FB99BF246 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000001000100010000011111110111001100110111111001001000110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv45_1E01 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001111000000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_1E00 : STD_LOGIC_VECTOR (13 downto 0) := "01111000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_1E01 : STD_LOGIC_VECTOR (13 downto 0) := "01111000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_4_fu_109_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_4_reg_262 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_267 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal c_load_reg_283 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal lowbits_r_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowbits_r_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal lowbits_l_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_fu_162_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_reg_309 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_56_reg_314 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret3_fu_215_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret3_reg_319 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_107_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_92 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_130_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_130_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pp1_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp1_fu_153_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp1_2_cast_fu_178_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_2_fu_181_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_57_fu_186_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_106_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret3_cast_fu_196_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_28_i_cast_cast_fu_207_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_i_fu_232_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_i_cast_fu_237_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_i_cast_fu_229_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_i_fu_241_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_fu_253_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_fu_253_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal a_fu_253_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_fu_253_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp1_fu_153_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_fu_162_p10 : STD_LOGIC_VECTOR (44 downto 0);

    component RLWE_enc2_mul_53nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component RLWE_enc2_mul_mulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    RLWE_enc2_mul_53nfYi_U25 : component RLWE_enc2_mul_53nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 53,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_130_p0,
        din1 => a_reg_288,
        ce => ap_const_logic_1,
        dout => grp_fu_130_p2);

    RLWE_enc2_mul_mulibs_U26 : component RLWE_enc2_mul_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => a_fu_253_p0,
        din1 => a_fu_253_p1,
        dout => a_fu_253_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_reg_92 <= j_4_reg_262;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_92 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                a_reg_288 <= a_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_load_reg_283 <= c_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_4_reg_262 <= j_4_fu_109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                lowbits_l_reg_304 <= grp_fu_130_p2(63 downto 32);
                lowbits_r_reg_299 <= lowbits_r_fu_136_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                pp2_reg_309 <= pp2_fu_162_p2;
                tmp_56_reg_314 <= pp1_fu_153_p2(44 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ret3_reg_319 <= ret3_fu_215_p2;
                tmp_107_reg_325 <= ret3_fu_215_p2(13 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_103_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_267(8 downto 0) <= tmp_fu_115_p1(8 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_267(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_103_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    a_fu_253_p0 <= a_fu_253_p00(16 - 1 downto 0);
    a_fu_253_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_load_reg_283),32));
    a_fu_253_p1 <= a_fu_253_p10(16 - 1 downto 0);
    a_fu_253_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_q0),32));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_103_p2)
    begin
        if ((((exitcond_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_103_p2)
    begin
        if (((exitcond_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_reg_267(8 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= tmp_fu_115_p1(8 - 1 downto 0);

    c_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_103_p2 <= "1" when (j_reg_92 = ap_const_lv9_100) else "0";
    grp_fu_130_p0 <= ap_const_lv64_8883FB99BF246(53 - 1 downto 0);
    j_4_fu_109_p2 <= std_logic_vector(unsigned(j_reg_92) + unsigned(ap_const_lv9_1));
    lowbits_r_fu_136_p1 <= grp_fu_130_p2(32 - 1 downto 0);
    out_r_address0 <= tmp_reg_267(8 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        out_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_fu_241_p3),16));


    out_r_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pp1_2_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_reg_314),45));
    pp1_fu_153_p1 <= pp1_fu_153_p10(32 - 1 downto 0);
    pp1_fu_153_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_r_reg_299),45));
    pp1_fu_153_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp1_fu_153_p1), 45));
    pp2_2_fu_181_p2 <= std_logic_vector(unsigned(pp1_2_cast_fu_178_p1) + unsigned(pp2_reg_309));
    pp2_fu_162_p1 <= pp2_fu_162_p10(32 - 1 downto 0);
    pp2_fu_162_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_l_reg_304),45));
    pp2_fu_162_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp2_fu_162_p1), 45));
    ret3_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_186_p4),14));
    ret3_fu_215_p2 <= std_logic_vector(unsigned(ret3_cast_fu_196_p1) - unsigned(tmp_28_i_cast_cast_fu_207_p3));
    tmp_106_fu_200_p3 <= a_reg_288(31 downto 31);
    tmp_28_i_cast_cast_fu_207_p3 <= 
        ap_const_lv14_1E00 when (tmp_106_fu_200_p3(0) = '1') else 
        ap_const_lv14_0;
        tmp_3_i_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret3_reg_319),15));

    tmp_4_i_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_i_fu_232_p2),15));
    tmp_4_i_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv14_1E01) + unsigned(ret3_reg_319));
    tmp_57_fu_186_p4 <= pp2_2_fu_181_p2(44 downto 32);
    tmp_5_i_fu_241_p3 <= 
        tmp_4_i_cast_fu_237_p1 when (tmp_107_reg_325(0) = '1') else 
        tmp_3_i_cast_fu_229_p1;
    tmp_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_92),64));
end behav;
