-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mod_r is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of mod_r is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_8883FB99BF246 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000001000100010000011111110111001100110111111001001000110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv45_1E01 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001111000000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_1E00 : STD_LOGIC_VECTOR (13 downto 0) := "01111000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_1E01 : STD_LOGIC_VECTOR (13 downto 0) := "01111000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lowbits_r_fu_48_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lowbits_r_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lowbits_l_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_fu_74_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_reg_183 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_6_reg_188 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_42_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_42_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pp1_fu_65_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp2_fu_74_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp1_fu_65_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal pp1_1_cast_fu_90_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_1_fu_93_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_7_fu_98_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret3_cast_fu_108_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_28_cast_cast_fu_119_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret3_fu_127_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_145_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_133_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_cast_fu_151_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_cast_fu_141_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal pp1_fu_65_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal pp2_fu_74_p10 : STD_LOGIC_VECTOR (44 downto 0);

    component RLWE_enc2_mul_53nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    RLWE_enc2_mul_53nfYi_U12 : component RLWE_enc2_mul_53nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 53,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_42_p0,
        din1 => x,
        ce => ap_const_logic_1,
        dout => grp_fu_42_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                lowbits_l_reg_178 <= grp_fu_42_p2(63 downto 32);
                lowbits_r_reg_173 <= lowbits_r_fu_48_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                pp2_reg_183 <= pp2_fu_74_p2;
                tmp_6_reg_188 <= pp1_fu_65_p2(44 downto 32);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        tmp_4_cast_fu_151_p1 when (tmp_3_fu_133_p3(0) = '1') else 
        tmp_3_cast_fu_141_p1;
    grp_fu_42_p0 <= ap_const_lv64_8883FB99BF246(53 - 1 downto 0);
    lowbits_r_fu_48_p1 <= grp_fu_42_p2(32 - 1 downto 0);
    pp1_1_cast_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_188),45));
    pp1_fu_65_p1 <= pp1_fu_65_p10(32 - 1 downto 0);
    pp1_fu_65_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_r_reg_173),45));
    pp1_fu_65_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp1_fu_65_p1), 45));
    pp2_1_fu_93_p2 <= std_logic_vector(unsigned(pp1_1_cast_fu_90_p1) + unsigned(pp2_reg_183));
    pp2_fu_74_p1 <= pp2_fu_74_p10(32 - 1 downto 0);
    pp2_fu_74_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lowbits_l_reg_178),45));
    pp2_fu_74_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv45_1E01) * unsigned(pp2_fu_74_p1), 45));
    ret3_cast_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_98_p4),14));
    ret3_fu_127_p2 <= std_logic_vector(unsigned(ret3_cast_fu_108_p1) - unsigned(tmp_28_cast_cast_fu_119_p3));
    tmp_28_cast_cast_fu_119_p3 <= 
        ap_const_lv14_1E00 when (tmp_2_fu_112_p3(0) = '1') else 
        ap_const_lv14_0;
    tmp_2_fu_112_p3 <= x(31 downto 31);
        tmp_3_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret3_fu_127_p2),15));

    tmp_3_fu_133_p3 <= ret3_fu_127_p2(13 downto 13);
    tmp_4_cast_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_145_p2),15));
    tmp_4_fu_145_p2 <= std_logic_vector(unsigned(ap_const_lv14_1E01) + unsigned(ret3_fu_127_p2));
    tmp_7_fu_98_p4 <= pp2_1_fu_93_p2(44 downto 32);
end behav;
