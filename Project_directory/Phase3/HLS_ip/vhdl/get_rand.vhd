-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_rand is
port (
    ap_ready : OUT STD_LOGIC;
    lfsr32_i : IN STD_LOGIC_VECTOR (31 downto 0);
    lfsr32_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    lfsr32_o_ap_vld : OUT STD_LOGIC;
    lfsr31_i : IN STD_LOGIC_VECTOR (31 downto 0);
    lfsr31_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    lfsr31_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of get_rand is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_B4BCD35C : STD_LOGIC_VECTOR (31 downto 0) := "10110100101111001101001101011100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv31_7A5BC2E3 : STD_LOGIC_VECTOR (30 downto 0) := "1111010010110111100001011100011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";

    signal lfsr_write_assign_fu_88_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lfsr_write_assign_3_s_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_fu_30_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal feedback_fu_26_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_i_fu_44_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_40_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lfsr_write_assign_5_fu_60_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i8_i_fu_66_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal feedback_3_fu_52_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i10_i_fu_80_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_76_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feedback_4_fu_104_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i17_i_cast_cas_fu_118_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i15_i_cast_fu_108_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal lfsr_write_assign_3_fu_126_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal rnd_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);


begin



    ap_ready <= ap_const_logic_1;
    ap_return <= (rnd_fu_142_p2 or ap_const_lv32_80000000);
    feedback_3_fu_52_p3 <= lfsr32_i(1 downto 1);
    feedback_4_fu_104_p1 <= lfsr31_i(1 - 1 downto 0);
    feedback_fu_26_p1 <= lfsr32_i(1 - 1 downto 0);

    lfsr31_o_assign_proc : process(lfsr31_i, lfsr_write_assign_3_s_fu_132_p1)
    begin
        lfsr31_o <= lfsr_write_assign_3_s_fu_132_p1;
    end process;

    lfsr31_o_ap_vld <= ap_const_logic_1;

    lfsr32_o_assign_proc : process(lfsr32_i, lfsr_write_assign_fu_88_p2)
    begin
        lfsr32_o <= lfsr_write_assign_fu_88_p2;
    end process;

    lfsr32_o_ap_vld <= ap_const_logic_1;
    lfsr_write_assign_3_fu_126_p2 <= (tmp_i15_i_cast_fu_108_p4 xor tmp_2_i17_i_cast_cas_fu_118_p3);
    lfsr_write_assign_3_s_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lfsr_write_assign_3_fu_126_p2),32));
    lfsr_write_assign_5_fu_60_p2 <= (tmp_fu_40_p1 xor tmp_2_i_i_fu_44_p3);
    lfsr_write_assign_fu_88_p2 <= (tmp_s_fu_76_p1 xor tmp_2_i10_i_fu_80_p3);
    rnd_fu_142_p2 <= (lfsr_write_assign_fu_88_p2 xor lfsr_write_assign_3_s_fu_132_p1);
    tmp_2_i10_i_fu_80_p3 <= 
        ap_const_lv32_B4BCD35C when (feedback_3_fu_52_p3(0) = '1') else 
        ap_const_lv32_0;
    tmp_2_i17_i_cast_cas_fu_118_p3 <= 
        ap_const_lv31_7A5BC2E3 when (feedback_4_fu_104_p1(0) = '1') else 
        ap_const_lv31_0;
    tmp_2_i_i_fu_44_p3 <= 
        ap_const_lv32_B4BCD35C when (feedback_fu_26_p1(0) = '1') else 
        ap_const_lv32_0;
    tmp_fu_40_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_fu_30_p4),32));
    tmp_i15_i_cast_fu_108_p4 <= lfsr31_i(31 downto 1);
    tmp_i8_i_fu_66_p4 <= lfsr_write_assign_5_fu_60_p2(31 downto 1);
    tmp_i_i_fu_30_p4 <= lfsr32_i(31 downto 1);
    tmp_s_fu_76_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i8_i_fu_66_p4),32));
end behav;
