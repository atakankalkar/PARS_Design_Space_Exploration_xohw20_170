// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XRLWE_ENC2_H
#define XRLWE_ENC2_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xrlwe_enc2_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 S_axi_bundle_BaseAddress;
} XRlwe_enc2_Config;
#endif

typedef struct {
    u32 S_axi_bundle_BaseAddress;
    u32 IsReady;
} XRlwe_enc2;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XRlwe_enc2_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XRlwe_enc2_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XRlwe_enc2_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XRlwe_enc2_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XRlwe_enc2_Initialize(XRlwe_enc2 *InstancePtr, u16 DeviceId);
XRlwe_enc2_Config* XRlwe_enc2_LookupConfig(u16 DeviceId);
int XRlwe_enc2_CfgInitialize(XRlwe_enc2 *InstancePtr, XRlwe_enc2_Config *ConfigPtr);
#else
int XRlwe_enc2_Initialize(XRlwe_enc2 *InstancePtr, const char* InstanceName);
int XRlwe_enc2_Release(XRlwe_enc2 *InstancePtr);
#endif

void XRlwe_enc2_Start(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_IsDone(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_IsIdle(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_IsReady(XRlwe_enc2 *InstancePtr);
void XRlwe_enc2_EnableAutoRestart(XRlwe_enc2 *InstancePtr);
void XRlwe_enc2_DisableAutoRestart(XRlwe_enc2 *InstancePtr);

u32 XRlwe_enc2_Get_a_BaseAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_a_HighAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_a_TotalBytes(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_a_BitWidth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_a_Depth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Write_a_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Read_a_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Write_a_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);
u32 XRlwe_enc2_Read_a_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);
u32 XRlwe_enc2_Get_c1_BaseAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_c1_HighAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_c1_TotalBytes(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_c1_BitWidth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_c1_Depth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Write_c1_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Read_c1_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Write_c1_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);
u32 XRlwe_enc2_Read_c1_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);
u32 XRlwe_enc2_Get_c2_BaseAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_c2_HighAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_c2_TotalBytes(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_c2_BitWidth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_c2_Depth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Write_c2_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Read_c2_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Write_c2_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);
u32 XRlwe_enc2_Read_c2_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);
u32 XRlwe_enc2_Get_m_BaseAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_m_HighAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_m_TotalBytes(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_m_BitWidth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_m_Depth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Write_m_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Read_m_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Write_m_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);
u32 XRlwe_enc2_Read_m_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);
u32 XRlwe_enc2_Get_p_BaseAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_p_HighAddress(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_p_TotalBytes(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_p_BitWidth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Get_p_Depth(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_Write_p_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Read_p_Words(XRlwe_enc2 *InstancePtr, int offset, int *data, int length);
u32 XRlwe_enc2_Write_p_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);
u32 XRlwe_enc2_Read_p_Bytes(XRlwe_enc2 *InstancePtr, int offset, char *data, int length);

void XRlwe_enc2_InterruptGlobalEnable(XRlwe_enc2 *InstancePtr);
void XRlwe_enc2_InterruptGlobalDisable(XRlwe_enc2 *InstancePtr);
void XRlwe_enc2_InterruptEnable(XRlwe_enc2 *InstancePtr, u32 Mask);
void XRlwe_enc2_InterruptDisable(XRlwe_enc2 *InstancePtr, u32 Mask);
void XRlwe_enc2_InterruptClear(XRlwe_enc2 *InstancePtr, u32 Mask);
u32 XRlwe_enc2_InterruptGetEnabled(XRlwe_enc2 *InstancePtr);
u32 XRlwe_enc2_InterruptGetStatus(XRlwe_enc2 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
