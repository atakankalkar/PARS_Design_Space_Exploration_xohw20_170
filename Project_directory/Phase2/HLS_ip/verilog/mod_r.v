// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mod_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 82'd1;
parameter    ap_ST_fsm_state2 = 82'd2;
parameter    ap_ST_fsm_state3 = 82'd4;
parameter    ap_ST_fsm_state4 = 82'd8;
parameter    ap_ST_fsm_state5 = 82'd16;
parameter    ap_ST_fsm_state6 = 82'd32;
parameter    ap_ST_fsm_state7 = 82'd64;
parameter    ap_ST_fsm_state8 = 82'd128;
parameter    ap_ST_fsm_state9 = 82'd256;
parameter    ap_ST_fsm_state10 = 82'd512;
parameter    ap_ST_fsm_state11 = 82'd1024;
parameter    ap_ST_fsm_state12 = 82'd2048;
parameter    ap_ST_fsm_state13 = 82'd4096;
parameter    ap_ST_fsm_state14 = 82'd8192;
parameter    ap_ST_fsm_state15 = 82'd16384;
parameter    ap_ST_fsm_state16 = 82'd32768;
parameter    ap_ST_fsm_state17 = 82'd65536;
parameter    ap_ST_fsm_state18 = 82'd131072;
parameter    ap_ST_fsm_state19 = 82'd262144;
parameter    ap_ST_fsm_state20 = 82'd524288;
parameter    ap_ST_fsm_state21 = 82'd1048576;
parameter    ap_ST_fsm_state22 = 82'd2097152;
parameter    ap_ST_fsm_state23 = 82'd4194304;
parameter    ap_ST_fsm_state24 = 82'd8388608;
parameter    ap_ST_fsm_state25 = 82'd16777216;
parameter    ap_ST_fsm_state26 = 82'd33554432;
parameter    ap_ST_fsm_state27 = 82'd67108864;
parameter    ap_ST_fsm_state28 = 82'd134217728;
parameter    ap_ST_fsm_state29 = 82'd268435456;
parameter    ap_ST_fsm_state30 = 82'd536870912;
parameter    ap_ST_fsm_state31 = 82'd1073741824;
parameter    ap_ST_fsm_state32 = 82'd2147483648;
parameter    ap_ST_fsm_state33 = 82'd4294967296;
parameter    ap_ST_fsm_state34 = 82'd8589934592;
parameter    ap_ST_fsm_state35 = 82'd17179869184;
parameter    ap_ST_fsm_state36 = 82'd34359738368;
parameter    ap_ST_fsm_state37 = 82'd68719476736;
parameter    ap_ST_fsm_state38 = 82'd137438953472;
parameter    ap_ST_fsm_state39 = 82'd274877906944;
parameter    ap_ST_fsm_state40 = 82'd549755813888;
parameter    ap_ST_fsm_state41 = 82'd1099511627776;
parameter    ap_ST_fsm_state42 = 82'd2199023255552;
parameter    ap_ST_fsm_state43 = 82'd4398046511104;
parameter    ap_ST_fsm_state44 = 82'd8796093022208;
parameter    ap_ST_fsm_state45 = 82'd17592186044416;
parameter    ap_ST_fsm_state46 = 82'd35184372088832;
parameter    ap_ST_fsm_state47 = 82'd70368744177664;
parameter    ap_ST_fsm_state48 = 82'd140737488355328;
parameter    ap_ST_fsm_state49 = 82'd281474976710656;
parameter    ap_ST_fsm_state50 = 82'd562949953421312;
parameter    ap_ST_fsm_state51 = 82'd1125899906842624;
parameter    ap_ST_fsm_state52 = 82'd2251799813685248;
parameter    ap_ST_fsm_state53 = 82'd4503599627370496;
parameter    ap_ST_fsm_state54 = 82'd9007199254740992;
parameter    ap_ST_fsm_state55 = 82'd18014398509481984;
parameter    ap_ST_fsm_state56 = 82'd36028797018963968;
parameter    ap_ST_fsm_state57 = 82'd72057594037927936;
parameter    ap_ST_fsm_state58 = 82'd144115188075855872;
parameter    ap_ST_fsm_state59 = 82'd288230376151711744;
parameter    ap_ST_fsm_state60 = 82'd576460752303423488;
parameter    ap_ST_fsm_state61 = 82'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 82'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 82'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 82'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 82'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 82'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 82'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 82'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 82'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 82'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 82'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 82'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 82'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 82'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 82'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 82'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 82'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 82'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 82'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 82'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 82'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 82'd2417851639229258349412352;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [81:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] ret2_fu_54_p3;
reg   [13:0] ret2_reg_205;
wire    ap_CS_fsm_state36;
wire   [17:0] tmp_6_fu_91_p2;
wire    ap_CS_fsm_state37;
wire   [15:0] tmp_7_fu_97_p1;
reg   [15:0] tmp_7_reg_219;
wire   [15:0] tmp_10_fu_111_p2;
reg   [15:0] tmp_10_reg_224;
wire    ap_CS_fsm_state58;
wire   [15:0] tmp_2_fu_122_p1;
reg   [15:0] tmp_2_reg_231;
wire    ap_CS_fsm_state59;
wire   [16:0] tmp_11_fu_125_p2;
reg   [16:0] tmp_11_reg_236;
wire   [0:0] tmp_12_fu_131_p2;
reg   [0:0] tmp_12_reg_241;
wire   [15:0] tmp_30_op_cast_fu_142_p2;
reg   [15:0] tmp_30_op_cast_reg_246;
wire   [15:0] tmp_14_fu_148_p1;
reg   [15:0] tmp_14_reg_251;
wire   [15:0] tmp3_fu_155_p3;
reg   [15:0] tmp3_reg_256;
wire    ap_CS_fsm_state60;
wire   [15:0] tmp_18_fu_185_p2;
reg   [15:0] tmp_18_reg_266;
wire    ap_CS_fsm_state81;
wire   [13:0] grp_fu_30_p1;
wire   [31:0] grp_fu_30_p2;
wire   [13:0] tmp_1_fu_36_p1;
wire   [0:0] tmp_3_fu_40_p3;
wire   [13:0] tmp_s_fu_48_p2;
wire   [14:0] ret2_cast_fu_65_p1;
wire   [0:0] tmp_4_fu_68_p2;
wire   [14:0] p_op_fu_73_p2;
wire   [14:0] tmp_5_fu_79_p3;
wire   [17:0] tmp_25_cast_fu_87_p1;
wire   [17:0] ret2_cast6_fu_62_p1;
wire   [13:0] grp_fu_101_p1;
wire   [15:0] grp_fu_101_p2;
wire   [15:0] tmp_9_fu_107_p1;
wire   [16:0] ret2_cast8_fu_116_p1;
wire  signed [16:0] tmp_28_cast5_fu_119_p1;
wire   [15:0] tmp_13_fu_137_p2;
wire  signed [17:0] tmp3_cast_cast_fu_161_p1;
wire  signed [17:0] tmp2_cast_cast_fu_152_p1;
wire   [17:0] grp_fu_171_p0;
wire   [13:0] grp_fu_171_p1;
wire   [15:0] grp_fu_171_p2;
wire   [15:0] tmp_17_fu_181_p1;
wire   [15:0] tmp_34_cast_fu_177_p2;
wire    ap_CS_fsm_state82;
wire   [15:0] tmp4_fu_191_p2;
reg    grp_fu_30_ap_start;
wire    grp_fu_30_ap_done;
reg    grp_fu_101_ap_start;
wire    grp_fu_101_ap_done;
reg    grp_fu_171_ap_start;
wire    grp_fu_171_ap_done;
wire   [15:0] tmp_19_fu_195_p2;
reg   [81:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 82'd1;
end

RLWE_enc2_srem_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 32 ))
RLWE_enc2_srem_32fYi_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_30_ap_start),
    .done(grp_fu_30_ap_done),
    .din0(x),
    .din1(grp_fu_30_p1),
    .ce(1'b1),
    .dout(grp_fu_30_p2)
);

RLWE_enc2_urem_18g8j #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
RLWE_enc2_urem_18g8j_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_101_ap_start),
    .done(grp_fu_101_ap_done),
    .din0(tmp_6_fu_91_p2),
    .din1(grp_fu_101_p1),
    .ce(1'b1),
    .dout(grp_fu_101_p2)
);

RLWE_enc2_urem_18g8j #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
RLWE_enc2_urem_18g8j_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_171_ap_start),
    .done(grp_fu_171_ap_done),
    .din0(grp_fu_171_p0),
    .din1(grp_fu_171_p1),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        ap_return <= tmp_19_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ret2_reg_205 <= ret2_fu_54_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        tmp3_reg_256 <= tmp3_fu_155_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        tmp_10_reg_224 <= tmp_10_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        tmp_11_reg_236 <= tmp_11_fu_125_p2;
        tmp_12_reg_241 <= tmp_12_fu_131_p2;
        tmp_14_reg_251 <= tmp_14_fu_148_p1;
        tmp_2_reg_231[13 : 0] <= tmp_2_fu_122_p1[13 : 0];
        tmp_30_op_cast_reg_246 <= tmp_30_op_cast_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        tmp_18_reg_266 <= tmp_18_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        tmp_7_reg_219 <= tmp_7_fu_97_p1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_101_ap_start = 1'b1;
    end else begin
        grp_fu_101_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_171_ap_start = 1'b1;
    end else begin
        grp_fu_171_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_30_ap_start = 1'b1;
    end else begin
        grp_fu_30_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign grp_fu_101_p1 = 18'd7681;

assign grp_fu_171_p0 = ($signed(tmp3_cast_cast_fu_161_p1) + $signed(tmp2_cast_cast_fu_152_p1));

assign grp_fu_171_p1 = 18'd7681;

assign grp_fu_30_p1 = 32'd7681;

assign p_op_fu_73_p2 = (15'd7680 + ret2_cast_fu_65_p1);

assign ret2_cast6_fu_62_p1 = ret2_reg_205;

assign ret2_cast8_fu_116_p1 = ret2_reg_205;

assign ret2_cast_fu_65_p1 = ret2_reg_205;

assign ret2_fu_54_p3 = ((tmp_3_fu_40_p3[0:0] === 1'b1) ? tmp_s_fu_48_p2 : tmp_1_fu_36_p1);

assign tmp2_cast_cast_fu_152_p1 = $signed(tmp_11_reg_236);

assign tmp3_cast_cast_fu_161_p1 = $signed(tmp3_fu_155_p3);

assign tmp3_fu_155_p3 = ((tmp_12_reg_241[0:0] === 1'b1) ? tmp_30_op_cast_reg_246 : 16'd65535);

assign tmp4_fu_191_p2 = (tmp_2_reg_231 + tmp_18_reg_266);

assign tmp_10_fu_111_p2 = (tmp_7_reg_219 - tmp_9_fu_107_p1);

assign tmp_11_fu_125_p2 = ($signed(ret2_cast8_fu_116_p1) + $signed(tmp_28_cast5_fu_119_p1));

assign tmp_12_fu_131_p2 = (($signed(tmp_11_fu_125_p2) < $signed(17'd7681)) ? 1'b1 : 1'b0);

assign tmp_13_fu_137_p2 = (tmp_10_reg_224 + tmp_2_fu_122_p1);

assign tmp_14_fu_148_p1 = tmp_11_fu_125_p2[15:0];

assign tmp_17_fu_181_p1 = grp_fu_171_p2[15:0];

assign tmp_18_fu_185_p2 = (tmp_17_fu_181_p1 - tmp_34_cast_fu_177_p2);

assign tmp_19_fu_195_p2 = (tmp4_fu_191_p2 + tmp_10_reg_224);

assign tmp_1_fu_36_p1 = grp_fu_30_p2[13:0];

assign tmp_25_cast_fu_87_p1 = tmp_5_fu_79_p3;

assign tmp_28_cast5_fu_119_p1 = $signed(tmp_10_reg_224);

assign tmp_2_fu_122_p1 = ret2_reg_205;

assign tmp_30_op_cast_fu_142_p2 = (16'd7680 - tmp_13_fu_137_p2);

assign tmp_34_cast_fu_177_p2 = (tmp_14_reg_251 + tmp3_reg_256);

assign tmp_3_fu_40_p3 = grp_fu_30_p2[32'd13];

assign tmp_4_fu_68_p2 = ((ret2_reg_205 != 14'd0) ? 1'b1 : 1'b0);

assign tmp_5_fu_79_p3 = ((tmp_4_fu_68_p2[0:0] === 1'b1) ? p_op_fu_73_p2 : 15'd7680);

assign tmp_6_fu_91_p2 = (tmp_25_cast_fu_87_p1 - ret2_cast6_fu_62_p1);

assign tmp_7_fu_97_p1 = tmp_6_fu_91_p2[15:0];

assign tmp_9_fu_107_p1 = grp_fu_101_p2[15:0];

assign tmp_s_fu_48_p2 = (14'd7681 + tmp_1_fu_36_p1);

always @ (posedge ap_clk) begin
    tmp_2_reg_231[15:14] <= 2'b00;
end

endmodule //mod_r
