// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clz (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] a;
output  [5:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_4_fu_62_p2;
wire    ap_CS_fsm_state2;
reg   [5:0] i_reg_32;
wire   [0:0] tmp_98_fu_83_p2;
wire   [0:0] tmp_fu_54_p3;
reg   [5:0] ap_phi_mux_p_0_phi_fu_46_p4;
wire   [5:0] tmp_s_fu_68_p2;
wire   [30:0] tmp_cast_fu_74_p1;
wire   [30:0] tmp_97_fu_78_p2;
reg   [5:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 6'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 6'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & ((tmp_fu_54_p3 == 1'd1) | (tmp_98_fu_83_p2 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_p_0_phi_fu_46_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_54_p3 == 1'd0) & (tmp_98_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_32 <= i_4_fu_62_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_32 <= 6'd0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & ((tmp_fu_54_p3 == 1'd1) | (tmp_98_fu_83_p2 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((tmp_fu_54_p3 == 1'd0) & (tmp_98_fu_83_p2 == 1'd1))) begin
            ap_phi_mux_p_0_phi_fu_46_p4 = i_reg_32;
        end else if ((tmp_fu_54_p3 == 1'd1)) begin
            ap_phi_mux_p_0_phi_fu_46_p4 = 6'd32;
        end else begin
            ap_phi_mux_p_0_phi_fu_46_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_0_phi_fu_46_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((tmp_fu_54_p3 == 1'd1) | (tmp_98_fu_83_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((tmp_fu_54_p3 == 1'd1) | (tmp_98_fu_83_p2 == 1'd1)))) begin
        ap_return = ap_phi_mux_p_0_phi_fu_46_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((tmp_fu_54_p3 == 1'd1) | (tmp_98_fu_83_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign i_4_fu_62_p2 = (i_reg_32 + 6'd1);

assign tmp_97_fu_78_p2 = a >> tmp_cast_fu_74_p1;

assign tmp_98_fu_83_p2 = ((tmp_97_fu_78_p2 == 31'd1) ? 1'b1 : 1'b0);

assign tmp_cast_fu_74_p1 = tmp_s_fu_68_p2;

assign tmp_fu_54_p3 = i_reg_32[32'd5];

assign tmp_s_fu_68_p2 = (6'd31 - i_reg_32);

endmodule //clz
