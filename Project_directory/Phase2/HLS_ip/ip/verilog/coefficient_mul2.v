// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module coefficient_mul2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_q0
);

parameter    ap_ST_fsm_state1 = 86'd1;
parameter    ap_ST_fsm_state2 = 86'd2;
parameter    ap_ST_fsm_state3 = 86'd4;
parameter    ap_ST_fsm_state4 = 86'd8;
parameter    ap_ST_fsm_state5 = 86'd16;
parameter    ap_ST_fsm_state6 = 86'd32;
parameter    ap_ST_fsm_state7 = 86'd64;
parameter    ap_ST_fsm_state8 = 86'd128;
parameter    ap_ST_fsm_state9 = 86'd256;
parameter    ap_ST_fsm_state10 = 86'd512;
parameter    ap_ST_fsm_state11 = 86'd1024;
parameter    ap_ST_fsm_state12 = 86'd2048;
parameter    ap_ST_fsm_state13 = 86'd4096;
parameter    ap_ST_fsm_state14 = 86'd8192;
parameter    ap_ST_fsm_state15 = 86'd16384;
parameter    ap_ST_fsm_state16 = 86'd32768;
parameter    ap_ST_fsm_state17 = 86'd65536;
parameter    ap_ST_fsm_state18 = 86'd131072;
parameter    ap_ST_fsm_state19 = 86'd262144;
parameter    ap_ST_fsm_state20 = 86'd524288;
parameter    ap_ST_fsm_state21 = 86'd1048576;
parameter    ap_ST_fsm_state22 = 86'd2097152;
parameter    ap_ST_fsm_state23 = 86'd4194304;
parameter    ap_ST_fsm_state24 = 86'd8388608;
parameter    ap_ST_fsm_state25 = 86'd16777216;
parameter    ap_ST_fsm_state26 = 86'd33554432;
parameter    ap_ST_fsm_state27 = 86'd67108864;
parameter    ap_ST_fsm_state28 = 86'd134217728;
parameter    ap_ST_fsm_state29 = 86'd268435456;
parameter    ap_ST_fsm_state30 = 86'd536870912;
parameter    ap_ST_fsm_state31 = 86'd1073741824;
parameter    ap_ST_fsm_state32 = 86'd2147483648;
parameter    ap_ST_fsm_state33 = 86'd4294967296;
parameter    ap_ST_fsm_state34 = 86'd8589934592;
parameter    ap_ST_fsm_state35 = 86'd17179869184;
parameter    ap_ST_fsm_state36 = 86'd34359738368;
parameter    ap_ST_fsm_state37 = 86'd68719476736;
parameter    ap_ST_fsm_state38 = 86'd137438953472;
parameter    ap_ST_fsm_state39 = 86'd274877906944;
parameter    ap_ST_fsm_state40 = 86'd549755813888;
parameter    ap_ST_fsm_state41 = 86'd1099511627776;
parameter    ap_ST_fsm_state42 = 86'd2199023255552;
parameter    ap_ST_fsm_state43 = 86'd4398046511104;
parameter    ap_ST_fsm_state44 = 86'd8796093022208;
parameter    ap_ST_fsm_state45 = 86'd17592186044416;
parameter    ap_ST_fsm_state46 = 86'd35184372088832;
parameter    ap_ST_fsm_state47 = 86'd70368744177664;
parameter    ap_ST_fsm_state48 = 86'd140737488355328;
parameter    ap_ST_fsm_state49 = 86'd281474976710656;
parameter    ap_ST_fsm_state50 = 86'd562949953421312;
parameter    ap_ST_fsm_state51 = 86'd1125899906842624;
parameter    ap_ST_fsm_state52 = 86'd2251799813685248;
parameter    ap_ST_fsm_state53 = 86'd4503599627370496;
parameter    ap_ST_fsm_state54 = 86'd9007199254740992;
parameter    ap_ST_fsm_state55 = 86'd18014398509481984;
parameter    ap_ST_fsm_state56 = 86'd36028797018963968;
parameter    ap_ST_fsm_state57 = 86'd72057594037927936;
parameter    ap_ST_fsm_state58 = 86'd144115188075855872;
parameter    ap_ST_fsm_state59 = 86'd288230376151711744;
parameter    ap_ST_fsm_state60 = 86'd576460752303423488;
parameter    ap_ST_fsm_state61 = 86'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 86'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 86'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 86'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 86'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 86'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 86'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 86'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 86'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 86'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 86'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 86'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 86'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 86'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 86'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 86'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 86'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 86'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 86'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 86'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 86'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 86'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 86'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 86'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 86'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 86'd38685626227668133590597632;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [15:0] out_r_d0;
output  [7:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [7:0] c_address0;
output   c_ce0;
input  [15:0] c_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ce0;
reg out_r_we0;
reg b_ce0;
reg c_ce0;

(* fsm_encoding = "none" *) reg   [85:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] j_4_fu_99_p2;
reg   [8:0] j_4_reg_297;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_105_p1;
reg   [63:0] tmp_reg_302;
wire   [0:0] exitcond_fu_93_p2;
wire    ap_CS_fsm_state3;
reg   [15:0] c_load_reg_318;
wire   [31:0] a_fu_288_p2;
reg   [31:0] a_reg_323;
wire    ap_CS_fsm_state4;
wire   [13:0] ret2_fu_140_p3;
reg   [13:0] ret2_reg_328;
wire    ap_CS_fsm_state40;
wire   [17:0] tmp_26_i_fu_177_p2;
wire    ap_CS_fsm_state41;
wire   [15:0] tmp_106_fu_183_p1;
reg   [15:0] tmp_106_reg_342;
wire   [15:0] tmp_28_i_fu_197_p2;
reg   [15:0] tmp_28_i_reg_347;
wire    ap_CS_fsm_state62;
wire   [15:0] tmp_2_i_fu_208_p1;
reg   [15:0] tmp_2_i_reg_354;
wire    ap_CS_fsm_state63;
wire   [16:0] tmp_29_i_fu_211_p2;
reg   [16:0] tmp_29_i_reg_359;
wire   [15:0] tmp3_fu_234_p3;
reg   [15:0] tmp3_reg_364;
wire   [15:0] tmp_108_fu_242_p1;
reg   [15:0] tmp_108_reg_370;
wire    ap_CS_fsm_state64;
wire   [15:0] tmp_36_i_fu_272_p2;
reg   [15:0] tmp_36_i_reg_380;
wire    ap_CS_fsm_state85;
reg   [8:0] j_reg_82;
wire    ap_CS_fsm_state86;
wire   [13:0] grp_fu_117_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_117_p2;
wire   [13:0] tmp_104_fu_122_p1;
wire   [0:0] tmp_105_fu_126_p3;
wire   [13:0] tmp_23_i_fu_134_p2;
wire   [14:0] ret2_cast_fu_151_p1;
wire   [0:0] tmp_24_i_fu_154_p2;
wire   [14:0] p_op_i_fu_159_p2;
wire   [14:0] tmp_25_i_fu_165_p3;
wire   [17:0] tmp_25_i_cast_fu_173_p1;
wire   [17:0] ret2_cast6_fu_148_p1;
wire   [13:0] grp_fu_187_p1;
wire   [15:0] grp_fu_187_p2;
wire   [15:0] tmp_107_fu_193_p1;
wire   [16:0] ret2_cast8_fu_202_p1;
wire  signed [16:0] tmp_28_i_cast5_fu_205_p1;
wire   [15:0] tmp_37_fu_223_p2;
wire   [0:0] tmp_31_i_fu_217_p2;
wire   [15:0] tmp_30_i_op_cast_fu_228_p2;
wire  signed [17:0] tmp3_cast_cast_fu_249_p1;
wire  signed [17:0] tmp2_cast_cast_fu_246_p1;
wire   [17:0] grp_fu_258_p0;
wire   [13:0] grp_fu_258_p1;
wire   [15:0] grp_fu_258_p2;
wire   [15:0] tmp_109_fu_268_p1;
wire   [15:0] tmp_34_i_cast_fu_264_p2;
wire   [15:0] tmp4_fu_278_p2;
wire   [15:0] a_fu_288_p0;
wire   [15:0] a_fu_288_p1;
reg    grp_fu_117_ap_start;
wire    grp_fu_117_ap_done;
reg    grp_fu_187_ap_start;
wire    grp_fu_187_ap_done;
reg    grp_fu_258_ap_start;
wire    grp_fu_258_ap_done;
reg   [85:0] ap_NS_fsm;
wire   [31:0] a_fu_288_p00;
wire   [31:0] a_fu_288_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 86'd1;
end

RLWE_enc2_srem_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 32 ))
RLWE_enc2_srem_32fYi_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_117_ap_start),
    .done(grp_fu_117_ap_done),
    .din0(a_reg_323),
    .din1(grp_fu_117_p1),
    .ce(1'b1),
    .dout(grp_fu_117_p2)
);

RLWE_enc2_urem_18g8j #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
RLWE_enc2_urem_18g8j_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_187_ap_start),
    .done(grp_fu_187_ap_done),
    .din0(tmp_26_i_fu_177_p2),
    .din1(grp_fu_187_p1),
    .ce(1'b1),
    .dout(grp_fu_187_p2)
);

RLWE_enc2_urem_18g8j #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
RLWE_enc2_urem_18g8j_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_258_ap_start),
    .done(grp_fu_258_ap_done),
    .din0(grp_fu_258_p0),
    .din1(grp_fu_258_p1),
    .ce(1'b1),
    .dout(grp_fu_258_p2)
);

RLWE_enc2_mul_muljbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
RLWE_enc2_mul_muljbC_U32(
    .din0(a_fu_288_p0),
    .din1(a_fu_288_p1),
    .dout(a_fu_288_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        j_reg_82 <= j_4_reg_297;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_82 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_reg_323 <= a_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_load_reg_318 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_4_reg_297 <= j_4_fu_99_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ret2_reg_328 <= ret2_fu_140_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        tmp3_reg_364 <= tmp3_fu_234_p3;
        tmp_108_reg_370 <= tmp_108_fu_242_p1;
        tmp_29_i_reg_359 <= tmp_29_i_fu_211_p2;
        tmp_2_i_reg_354[13 : 0] <= tmp_2_i_fu_208_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_106_reg_342 <= tmp_106_fu_183_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        tmp_28_i_reg_347 <= tmp_28_i_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        tmp_36_i_reg_380 <= tmp_36_i_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_93_p2 == 1'd0))) begin
        tmp_reg_302[8 : 0] <= tmp_fu_105_p1[8 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_93_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_93_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_117_ap_start = 1'b1;
    end else begin
        grp_fu_117_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_187_ap_start = 1'b1;
    end else begin
        grp_fu_187_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_258_ap_start = 1'b1;
    end else begin
        grp_fu_258_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_93_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_288_p0 = a_fu_288_p00;

assign a_fu_288_p00 = b_q0;

assign a_fu_288_p1 = a_fu_288_p10;

assign a_fu_288_p10 = c_load_reg_318;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign b_address0 = tmp_reg_302;

assign c_address0 = tmp_fu_105_p1;

assign exitcond_fu_93_p2 = ((j_reg_82 == 9'd256) ? 1'b1 : 1'b0);

assign grp_fu_117_p1 = 32'd7681;

assign grp_fu_187_p1 = 18'd7681;

assign grp_fu_258_p0 = ($signed(tmp3_cast_cast_fu_249_p1) + $signed(tmp2_cast_cast_fu_246_p1));

assign grp_fu_258_p1 = 18'd7681;

assign j_4_fu_99_p2 = (j_reg_82 + 9'd1);

assign out_r_address0 = tmp_reg_302;

assign out_r_d0 = (tmp4_fu_278_p2 + tmp_28_i_reg_347);

assign p_op_i_fu_159_p2 = (15'd7680 + ret2_cast_fu_151_p1);

assign ret2_cast6_fu_148_p1 = ret2_reg_328;

assign ret2_cast8_fu_202_p1 = ret2_reg_328;

assign ret2_cast_fu_151_p1 = ret2_reg_328;

assign ret2_fu_140_p3 = ((tmp_105_fu_126_p3[0:0] === 1'b1) ? tmp_23_i_fu_134_p2 : tmp_104_fu_122_p1);

assign tmp2_cast_cast_fu_246_p1 = $signed(tmp_29_i_reg_359);

assign tmp3_cast_cast_fu_249_p1 = $signed(tmp3_reg_364);

assign tmp3_fu_234_p3 = ((tmp_31_i_fu_217_p2[0:0] === 1'b1) ? tmp_30_i_op_cast_fu_228_p2 : 16'd65535);

assign tmp4_fu_278_p2 = (tmp_2_i_reg_354 + tmp_36_i_reg_380);

assign tmp_104_fu_122_p1 = grp_fu_117_p2[13:0];

assign tmp_105_fu_126_p3 = grp_fu_117_p2[32'd13];

assign tmp_106_fu_183_p1 = tmp_26_i_fu_177_p2[15:0];

assign tmp_107_fu_193_p1 = grp_fu_187_p2[15:0];

assign tmp_108_fu_242_p1 = tmp_29_i_fu_211_p2[15:0];

assign tmp_109_fu_268_p1 = grp_fu_258_p2[15:0];

assign tmp_23_i_fu_134_p2 = (14'd7681 + tmp_104_fu_122_p1);

assign tmp_24_i_fu_154_p2 = ((ret2_reg_328 != 14'd0) ? 1'b1 : 1'b0);

assign tmp_25_i_cast_fu_173_p1 = tmp_25_i_fu_165_p3;

assign tmp_25_i_fu_165_p3 = ((tmp_24_i_fu_154_p2[0:0] === 1'b1) ? p_op_i_fu_159_p2 : 15'd7680);

assign tmp_26_i_fu_177_p2 = (tmp_25_i_cast_fu_173_p1 - ret2_cast6_fu_148_p1);

assign tmp_28_i_cast5_fu_205_p1 = $signed(tmp_28_i_reg_347);

assign tmp_28_i_fu_197_p2 = (tmp_106_reg_342 - tmp_107_fu_193_p1);

assign tmp_29_i_fu_211_p2 = ($signed(ret2_cast8_fu_202_p1) + $signed(tmp_28_i_cast5_fu_205_p1));

assign tmp_2_i_fu_208_p1 = ret2_reg_328;

assign tmp_30_i_op_cast_fu_228_p2 = (16'd7680 - tmp_37_fu_223_p2);

assign tmp_31_i_fu_217_p2 = (($signed(tmp_29_i_fu_211_p2) < $signed(17'd7681)) ? 1'b1 : 1'b0);

assign tmp_34_i_cast_fu_264_p2 = (tmp_108_reg_370 + tmp3_reg_364);

assign tmp_36_i_fu_272_p2 = (tmp_109_fu_268_p1 - tmp_34_i_cast_fu_264_p2);

assign tmp_37_fu_223_p2 = (tmp_28_i_reg_347 + tmp_2_i_fu_208_p1);

assign tmp_fu_105_p1 = j_reg_82;

always @ (posedge ap_clk) begin
    tmp_reg_302[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    tmp_2_i_reg_354[15:14] <= 2'b00;
end

endmodule //coefficient_mul2
