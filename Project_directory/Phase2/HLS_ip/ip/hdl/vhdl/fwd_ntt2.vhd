-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fwd_ntt2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_we1 : OUT STD_LOGIC;
    a_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fwd_ntt2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_429 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000101001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv30_13FE : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001001111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal primrt_omega_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal primrt_omega_table_ce0 : STD_LOGIC;
    signal primrt_omega_table_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal primrt_omega_table_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal primrt_omega_table_ce1 : STD_LOGIC;
    signal primrt_omega_table_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal reg_233 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_3_fu_243_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_623 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal primrt_cast_fu_259_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal primrt_cast_reg_638 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal primrt_omega_table_l_2_fu_263_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_1_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_fu_343_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_addr_6_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_7_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_8_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_addr_9_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_2_fu_591_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_2_reg_692 : STD_LOGIC_VECTOR (28 downto 0);
    signal j_3_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_load_6_reg_702 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_78_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_85_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_cast_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_cast_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_mod_r_fu_211_ap_done : STD_LOGIC;
    signal grp_mod_r_fu_216_ap_done : STD_LOGIC;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal tmp_115_cast_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_cast_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_cast_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_cast_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_cast_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_cast_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_223_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_92_reg_737 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_mod_r_fu_223_ap_done : STD_LOGIC;
    signal grp_mod_r_fu_228_ap_done : STD_LOGIC;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal grp_mod_r_fu_228_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_94_reg_742 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_4_cast_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_4_cast_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_mod_r_fu_211_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j_2_fu_518_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_reg_760 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_102_fu_524_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_reg_770 : STD_LOGIC_VECTOR (7 downto 0);
    signal t1_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal omega_fu_614_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal omega_reg_781 : STD_LOGIC_VECTOR (29 downto 0);
    signal a_addr_5_reg_786 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal omega_2_cast_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_2_cast_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_cast_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_cast_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal tmp_94_cast_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_cast_reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_216_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_71_reg_807 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mod_r_fu_211_ap_start : STD_LOGIC;
    signal grp_mod_r_fu_211_ap_idle : STD_LOGIC;
    signal grp_mod_r_fu_211_ap_ready : STD_LOGIC;
    signal grp_mod_r_fu_211_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_216_ap_start : STD_LOGIC;
    signal grp_mod_r_fu_216_ap_idle : STD_LOGIC;
    signal grp_mod_r_fu_216_ap_ready : STD_LOGIC;
    signal grp_mod_r_fu_216_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_223_ap_start : STD_LOGIC;
    signal grp_mod_r_fu_223_ap_idle : STD_LOGIC;
    signal grp_mod_r_fu_223_ap_ready : STD_LOGIC;
    signal grp_mod_r_fu_228_ap_start : STD_LOGIC;
    signal grp_mod_r_fu_228_ap_idle : STD_LOGIC;
    signal grp_mod_r_fu_228_ap_ready : STD_LOGIC;
    signal m_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_101_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_0_in_reg_167 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_state19_on_subcall_done : BOOLEAN;
    signal omega_1_reg_199 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_grp_mod_r_fu_211_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_reg_grp_mod_r_fu_216_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_mod_r_fu_223_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_mod_r_fu_228_ap_start : STD_LOGIC := '0';
    signal tmp_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_op_op7_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_301_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_63_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_311_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_74_fu_317_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_62_fu_273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_fu_327_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_99_fu_335_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_103_fu_356_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_72_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_2_cast_fu_452_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal u1_1_cast_fu_448_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_87_fu_464_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal t2_cast_fu_460_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal u2_cast_fu_456_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_89_fu_475_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_91_fu_486_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_93_fu_497_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_60_fu_530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal t1_1_cast_fu_561_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal u1_cast_fu_565_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_67_fu_569_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_69_fu_580_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal omega_2_fu_591_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_2_fu_591_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_78_fu_596_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_78_fu_596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega2_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_fu_602_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_fu_608_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t1_fu_608_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal omega_fu_614_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal omega_fu_614_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal omega_2_fu_591_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal omega_fu_614_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal t1_fu_608_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_608_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_596_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_fu_602_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component mod_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component RLWE_enc2_mul_mulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component RLWE_enc2_mul_muljbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component RLWE_enc2_mul_mulkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component fwd_ntt2_primrt_ohbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    primrt_omega_table_U : component fwd_ntt2_primrt_ohbi
    generic map (
        DataWidth => 13,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => primrt_omega_table_address0,
        ce0 => primrt_omega_table_ce0,
        q0 => primrt_omega_table_q0,
        address1 => primrt_omega_table_address1,
        ce1 => primrt_omega_table_ce1,
        q1 => primrt_omega_table_q1);

    grp_mod_r_fu_211 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mod_r_fu_211_ap_start,
        ap_done => grp_mod_r_fu_211_ap_done,
        ap_idle => grp_mod_r_fu_211_ap_idle,
        ap_ready => grp_mod_r_fu_211_ap_ready,
        x => grp_mod_r_fu_211_x,
        ap_return => grp_mod_r_fu_211_ap_return);

    grp_mod_r_fu_216 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mod_r_fu_216_ap_start,
        ap_done => grp_mod_r_fu_216_ap_done,
        ap_idle => grp_mod_r_fu_216_ap_idle,
        ap_ready => grp_mod_r_fu_216_ap_ready,
        x => grp_mod_r_fu_216_x,
        ap_return => grp_mod_r_fu_216_ap_return);

    grp_mod_r_fu_223 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mod_r_fu_223_ap_start,
        ap_done => grp_mod_r_fu_223_ap_done,
        ap_idle => grp_mod_r_fu_223_ap_idle,
        ap_ready => grp_mod_r_fu_223_ap_ready,
        x => tmp_117_cast_reg_727,
        ap_return => grp_mod_r_fu_223_ap_return);

    grp_mod_r_fu_228 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mod_r_fu_228_ap_start,
        ap_done => grp_mod_r_fu_228_ap_done,
        ap_idle => grp_mod_r_fu_228_ap_idle,
        ap_ready => grp_mod_r_fu_228_ap_ready,
        x => tmp_119_cast_reg_732,
        ap_return => grp_mod_r_fu_228_ap_return);

    RLWE_enc2_mul_mulibs_U19 : component RLWE_enc2_mul_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => omega_2_fu_591_p0,
        din1 => omega_2_fu_591_p1,
        dout => omega_2_fu_591_p2);

    RLWE_enc2_mul_muljbC_U20 : component RLWE_enc2_mul_muljbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_78_fu_596_p0,
        din1 => tmp_78_fu_596_p1,
        dout => tmp_78_fu_596_p2);

    RLWE_enc2_mul_muljbC_U21 : component RLWE_enc2_mul_muljbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_85_fu_602_p0,
        din1 => tmp_85_fu_602_p1,
        dout => tmp_85_fu_602_p2);

    RLWE_enc2_mul_muljbC_U22 : component RLWE_enc2_mul_muljbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => t1_fu_608_p0,
        din1 => t1_fu_608_p1,
        dout => t1_fu_608_p2);

    RLWE_enc2_mul_mulkbM_U23 : component RLWE_enc2_mul_mulkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => omega_fu_614_p0,
        din1 => omega_fu_614_p1,
        dout => omega_fu_614_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_mod_r_fu_211_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mod_r_fu_211_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done)))) then 
                    ap_reg_grp_mod_r_fu_211_ap_start <= ap_const_logic_1;
                elsif ((grp_mod_r_fu_211_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mod_r_fu_211_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_mod_r_fu_216_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mod_r_fu_216_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done)))) then 
                    ap_reg_grp_mod_r_fu_216_ap_start <= ap_const_logic_1;
                elsif ((grp_mod_r_fu_216_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mod_r_fu_216_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_mod_r_fu_223_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mod_r_fu_223_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                    ap_reg_grp_mod_r_fu_223_ap_start <= ap_const_logic_1;
                elsif ((grp_mod_r_fu_223_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mod_r_fu_223_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_mod_r_fu_228_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mod_r_fu_228_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                    ap_reg_grp_mod_r_fu_228_ap_start <= ap_const_logic_1;
                elsif ((grp_mod_r_fu_228_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mod_r_fu_228_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_101_fu_351_p2 = ap_const_lv1_1))) then 
                i_reg_144 <= i_3_reg_623;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_144 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_188 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_state19_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j_1_reg_188 <= j_2_reg_760;
            end if; 
        end if;
    end process;

    j_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_mod_r_fu_211_ap_done = ap_const_logic_1))) then 
                j_reg_155 <= j_3_reg_697;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_155 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_101_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_reg_177 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_reg_177 <= k_1_reg_687;
            end if; 
        end if;
    end process;

    m_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_101_fu_351_p2 = ap_const_lv1_1))) then 
                                m_reg_132(31 downto 1) <= m_1_reg_648(31 downto 1);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_reg_132(1) <= '1';
                m_reg_132(2) <= '0';
                m_reg_132(3) <= '0';
                m_reg_132(4) <= '0';
                m_reg_132(5) <= '0';
                m_reg_132(6) <= '0';
                m_reg_132(7) <= '0';
                m_reg_132(8) <= '0';
                m_reg_132(9) <= '0';
                m_reg_132(10) <= '0';
                m_reg_132(11) <= '0';
                m_reg_132(12) <= '0';
                m_reg_132(13) <= '0';
                m_reg_132(14) <= '0';
                m_reg_132(15) <= '0';
                m_reg_132(16) <= '0';
                m_reg_132(17) <= '0';
                m_reg_132(18) <= '0';
                m_reg_132(19) <= '0';
                m_reg_132(20) <= '0';
                m_reg_132(21) <= '0';
                m_reg_132(22) <= '0';
                m_reg_132(23) <= '0';
                m_reg_132(24) <= '0';
                m_reg_132(25) <= '0';
                m_reg_132(26) <= '0';
                m_reg_132(27) <= '0';
                m_reg_132(28) <= '0';
                m_reg_132(29) <= '0';
                m_reg_132(30) <= '0';
                m_reg_132(31) <= '0';
            end if; 
        end if;
    end process;

    omega_0_in_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_mod_r_fu_211_ap_done = ap_const_logic_1))) then 
                omega_0_in_reg_167 <= grp_mod_r_fu_211_ap_return;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                omega_0_in_reg_167 <= primrt_omega_table_l_2_fu_263_p1;
            end if; 
        end if;
    end process;

    omega_1_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                omega_1_reg_199 <= ap_const_lv16_429;
            elsif (((ap_const_boolean_0 = ap_block_state19_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                omega_1_reg_199 <= tmp_71_reg_807;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    a_addr_5_reg_786(7 downto 1) <= tmp_66_fu_553_p1(8 - 1 downto 0)(7 downto 1);
                    omega_2_cast_reg_792(29 downto 0) <= omega_2_cast_fu_557_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_fu_366_p2 = ap_const_lv1_1))) then
                a_addr_6_reg_665 <= tmp_73_fu_378_p1(8 - 1 downto 0);
                    a_addr_7_reg_670(7 downto 1) <= tmp_76_fu_389_p1(8 - 1 downto 0)(7 downto 1);
                a_addr_8_reg_676 <= tmp_81_fu_406_p1(8 - 1 downto 0);
                    a_addr_9_reg_682(7 downto 1) <= tmp_83_fu_417_p1(8 - 1 downto 0)(7 downto 1);
                k_1_reg_687 <= k_1_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    a_addr_reg_770(7 downto 1) <= tmp_61_fu_536_p1(8 - 1 downto 0)(7 downto 1);
                    tmp_102_reg_765(7 downto 1) <= tmp_102_fu_524_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                a_load_6_reg_702 <= a_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_623 <= i_3_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_2_reg_760 <= j_2_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                j_3_reg_697 <= j_3_fu_431_p2;
                omega_2_reg_692 <= omega_2_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    m_1_reg_648(31 downto 2) <= m_1_fu_267_p2(31 downto 2);
                    primrt_cast_reg_638(12 downto 0) <= primrt_cast_fu_259_p1(12 downto 0);
                    tmp_100_reg_654(31 downto 1) <= tmp_100_fu_343_p3(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    omega_4_cast_reg_747(28 downto 0) <= omega_4_cast_fu_508_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                omega_reg_781 <= omega_fu_614_p2;
                t1_reg_776 <= t1_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_233 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                    tmp_113_cast_reg_717(16 downto 0) <= tmp_113_cast_fu_470_p1(16 downto 0);
                    tmp_115_cast_reg_722(16 downto 0) <= tmp_115_cast_fu_481_p1(16 downto 0);
                tmp_117_cast_reg_727 <= tmp_117_cast_fu_492_p1;
                tmp_119_cast_reg_732 <= tmp_119_cast_fu_503_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                tmp_71_reg_807 <= grp_mod_r_fu_216_ap_return;
                    tmp_92_cast_reg_797(16 downto 0) <= tmp_92_cast_fu_575_p1(16 downto 0);
                tmp_94_cast_reg_802 <= tmp_94_cast_fu_586_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_78_reg_707 <= tmp_78_fu_596_p2;
                tmp_85_reg_712 <= tmp_85_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                tmp_92_reg_737 <= grp_mod_r_fu_223_ap_return;
                tmp_94_reg_742 <= grp_mod_r_fu_228_ap_return;
            end if;
        end if;
    end process;
    primrt_cast_reg_638(28 downto 13) <= "0000000000000000";
    m_1_reg_648(1 downto 0) <= "00";
    tmp_100_reg_654(0) <= '0';
    a_addr_7_reg_670(0) <= '1';
    a_addr_9_reg_682(0) <= '1';
    tmp_113_cast_reg_717(31 downto 17) <= "000000000000000";
    tmp_115_cast_reg_722(31 downto 17) <= "000000000000000";
    omega_4_cast_reg_747(31 downto 29) <= "000";
    tmp_102_reg_765(0) <= '0';
    a_addr_reg_770(0) <= '1';
    a_addr_5_reg_786(0) <= '0';
    omega_2_cast_reg_792(31 downto 30) <= "00";
    tmp_92_cast_reg_797(31 downto 17) <= "000000000000000";
    m_reg_132(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_237_p2, ap_CS_fsm_state5, icmp_fu_366_p2, ap_CS_fsm_state9, grp_mod_r_fu_211_ap_done, ap_block_state9_on_subcall_done, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state13, ap_CS_fsm_state14, exitcond_fu_512_p2, ap_CS_fsm_state18, ap_block_state18_on_subcall_done, ap_CS_fsm_state4, tmp_101_fu_351_p2, ap_CS_fsm_state19, ap_block_state19_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_101_fu_351_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_mod_r_fu_211_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_512_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_boolean_0 = ap_block_state19_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(a_addr_6_reg_665, ap_CS_fsm_state5, a_addr_8_reg_676, ap_CS_fsm_state10, ap_CS_fsm_state14, a_addr_5_reg_786, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state8, tmp_76_fu_389_p1, tmp_61_fu_536_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            a_address0 <= a_addr_5_reg_786;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            a_address0 <= tmp_61_fu_536_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_address0 <= a_addr_8_reg_676;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            a_address0 <= a_addr_6_reg_665;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= tmp_76_fu_389_p1(8 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_state5, a_addr_7_reg_670, a_addr_8_reg_676, a_addr_9_reg_682, ap_CS_fsm_state10, a_addr_reg_770, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state8, tmp_83_fu_417_p1, tmp_66_fu_553_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            a_address1 <= a_addr_reg_770;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            a_address1 <= tmp_66_fu_553_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_address1 <= a_addr_9_reg_682;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_address1 <= a_addr_7_reg_670;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_address1 <= a_addr_8_reg_676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address1 <= tmp_83_fu_417_p1(8 - 1 downto 0);
        else 
            a_address1 <= "XXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_block_state19_on_subcall_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_state19_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_block_state19_on_subcall_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_state19_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(tmp_92_reg_737, ap_CS_fsm_state10, grp_mod_r_fu_211_ap_return, ap_CS_fsm_state11, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_d0 <= tmp_92_reg_737;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            a_d0 <= grp_mod_r_fu_211_ap_return;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_d1_assign_proc : process(ap_CS_fsm_state10, tmp_94_reg_742, grp_mod_r_fu_216_ap_return, ap_CS_fsm_state11, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_d1 <= tmp_94_reg_742;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            a_d1 <= grp_mod_r_fu_216_ap_return;
        else 
            a_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_block_state19_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_state19_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we1_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_block_state19_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_state19_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done)))) then 
            a_we1 <= ap_const_logic_1;
        else 
            a_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_on_subcall_done_assign_proc : process(grp_mod_r_fu_211_ap_done, grp_mod_r_fu_216_ap_done, grp_mod_r_fu_223_ap_done, grp_mod_r_fu_228_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_mod_r_fu_228_ap_done = ap_const_logic_0) or (grp_mod_r_fu_223_ap_done = ap_const_logic_0) or (grp_mod_r_fu_216_ap_done = ap_const_logic_0) or (grp_mod_r_fu_211_ap_done = ap_const_logic_0));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_mod_r_fu_211_ap_done, grp_mod_r_fu_216_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((grp_mod_r_fu_216_ap_done = ap_const_logic_0) or (grp_mod_r_fu_211_ap_done = ap_const_logic_0));
    end process;


    ap_block_state19_on_subcall_done_assign_proc : process(grp_mod_r_fu_211_ap_done, grp_mod_r_fu_216_ap_done)
    begin
                ap_block_state19_on_subcall_done <= ((grp_mod_r_fu_216_ap_done = ap_const_logic_0) or (grp_mod_r_fu_211_ap_done = ap_const_logic_0));
    end process;


    ap_block_state9_on_subcall_done_assign_proc : process(grp_mod_r_fu_211_ap_done, grp_mod_r_fu_216_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_mod_r_fu_216_ap_done = ap_const_logic_0) or (grp_mod_r_fu_211_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14, exitcond_fu_512_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_512_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_512_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_512_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_237_p2 <= "1" when (i_reg_144 = ap_const_lv3_7) else "0";
    exitcond_fu_512_p2 <= "1" when (j_1_reg_188 = ap_const_lv8_80) else "0";
    grp_mod_r_fu_211_ap_start <= ap_reg_grp_mod_r_fu_211_ap_start;

    grp_mod_r_fu_211_x_assign_proc : process(tmp_78_reg_707, tmp_113_cast_reg_717, ap_CS_fsm_state9, ap_CS_fsm_state10, omega_4_cast_reg_747, ap_CS_fsm_state13, t1_reg_776, tmp_92_cast_reg_797, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_mod_r_fu_211_x <= tmp_92_cast_reg_797;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_mod_r_fu_211_x <= t1_reg_776;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_mod_r_fu_211_x <= omega_4_cast_reg_747;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_mod_r_fu_211_x <= tmp_113_cast_reg_717;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_mod_r_fu_211_x <= tmp_78_reg_707;
        else 
            grp_mod_r_fu_211_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_mod_r_fu_216_ap_start <= ap_reg_grp_mod_r_fu_216_ap_start;

    grp_mod_r_fu_216_x_assign_proc : process(tmp_85_reg_712, ap_CS_fsm_state9, tmp_115_cast_reg_722, ap_CS_fsm_state10, omega_2_cast_reg_792, ap_CS_fsm_state18, tmp_94_cast_reg_802, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_mod_r_fu_216_x <= tmp_94_cast_reg_802;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_mod_r_fu_216_x <= omega_2_cast_reg_792;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_mod_r_fu_216_x <= tmp_115_cast_reg_722;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_mod_r_fu_216_x <= tmp_85_reg_712;
        else 
            grp_mod_r_fu_216_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_mod_r_fu_223_ap_start <= ap_reg_grp_mod_r_fu_223_ap_start;
    grp_mod_r_fu_228_ap_start <= ap_reg_grp_mod_r_fu_228_ap_start;
    i_3_fu_243_p2 <= std_logic_vector(unsigned(i_reg_144) + unsigned(ap_const_lv3_1));
    icmp_fu_366_p2 <= "1" when (signed(tmp_103_fu_356_p4) < signed(ap_const_lv24_1)) else "0";
    j_2_fu_518_p2 <= std_logic_vector(unsigned(j_1_reg_188) + unsigned(ap_const_lv8_1));
    j_3_fu_431_p2 <= std_logic_vector(unsigned(j_reg_155) + unsigned(ap_const_lv32_2));
    k_1_fu_422_p2 <= std_logic_vector(unsigned(m_1_reg_648) + unsigned(k_reg_177));
    m_1_fu_267_p2 <= std_logic_vector(shift_left(unsigned(m_reg_132),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    m_op_op7_fu_281_p2 <= (m_reg_132 or ap_const_lv32_1);
    omega2_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_0_in_reg_167),32));
    omega_2_cast_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_reg_781),32));
    omega_2_fu_591_p0 <= omega_2_fu_591_p00(16 - 1 downto 0);
    omega_2_fu_591_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_0_in_reg_167),29));
    omega_2_fu_591_p1 <= primrt_cast_reg_638(13 - 1 downto 0);
    omega_4_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_2_reg_692),32));
    omega_fu_614_p0 <= ap_const_lv30_13FE(14 - 1 downto 0);
    omega_fu_614_p1 <= omega_fu_614_p10(16 - 1 downto 0);
    omega_fu_614_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_1_reg_199),30));
    p_lshr_fu_301_p4 <= p_neg_fu_295_p2(31 downto 1);
    p_neg_fu_295_p2 <= (m_reg_132 xor ap_const_lv32_FFFFFFFF);
    p_neg_t_fu_311_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_301_p4));
    primrt_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(primrt_omega_table_q0),29));
    primrt_omega_table_address0 <= tmp_fu_249_p1(3 - 1 downto 0);
    primrt_omega_table_address1 <= tmp_s_fu_254_p1(3 - 1 downto 0);

    primrt_omega_table_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            primrt_omega_table_ce0 <= ap_const_logic_1;
        else 
            primrt_omega_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    primrt_omega_table_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            primrt_omega_table_ce1 <= ap_const_logic_1;
        else 
            primrt_omega_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    primrt_omega_table_l_2_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(primrt_omega_table_q1),16));
    t1_1_cast_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mod_r_fu_211_ap_return),17));
    t1_2_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mod_r_fu_211_ap_return),17));
    t1_fu_608_p0 <= t1_fu_608_p00(16 - 1 downto 0);
    t1_fu_608_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(omega_1_reg_199),32));
    t1_fu_608_p1 <= t1_fu_608_p10(16 - 1 downto 0);
    t1_fu_608_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_233),32));
    t2_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mod_r_fu_216_ap_return),17));
    tmp1_fu_394_p2 <= std_logic_vector(unsigned(m_reg_132) + unsigned(k_reg_177));
    tmp_100_fu_343_p3 <= (tmp_99_fu_335_p3 & ap_const_lv1_0);
    tmp_101_fu_351_p2 <= "1" when (j_reg_155 = tmp_100_reg_654) else "0";
    tmp_102_fu_524_p2 <= std_logic_vector(shift_left(unsigned(j_1_reg_188),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_103_fu_356_p4 <= k_reg_177(31 downto 8);
    tmp_113_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_464_p2),32));
    tmp_115_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_475_p2),32));
        tmp_117_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_91_fu_486_p2),32));

        tmp_119_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_93_fu_497_p2),32));

    tmp_60_fu_530_p2 <= (tmp_102_fu_524_p2 or ap_const_lv8_1);
    tmp_61_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_530_p2),64));
    tmp_62_fu_273_p3 <= m_reg_132(31 downto 31);
    tmp_63_fu_287_p3 <= m_op_op7_fu_281_p2(31 downto 31);
    tmp_66_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_reg_765),64));
    tmp_67_fu_569_p2 <= std_logic_vector(unsigned(t1_1_cast_fu_561_p1) + unsigned(u1_cast_fu_565_p1));
    tmp_69_fu_580_p2 <= std_logic_vector(unsigned(u1_cast_fu_565_p1) - unsigned(t1_1_cast_fu_561_p1));
    tmp_72_fu_372_p2 <= std_logic_vector(unsigned(k_reg_177) + unsigned(j_reg_155));
        tmp_73_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_72_fu_372_p2),64));

    tmp_74_fu_317_p4 <= m_op_op7_fu_281_p2(31 downto 1);
    tmp_75_fu_383_p2 <= (tmp_72_fu_372_p2 or ap_const_lv32_1);
        tmp_76_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_75_fu_383_p2),64));

    tmp_78_fu_596_p0 <= tmp_78_fu_596_p00(16 - 1 downto 0);
    tmp_78_fu_596_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_233),32));
    tmp_78_fu_596_p1 <= omega2_fu_441_p1(16 - 1 downto 0);
    tmp_80_fu_400_p2 <= std_logic_vector(unsigned(tmp1_fu_394_p2) + unsigned(j_reg_155));
        tmp_81_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_80_fu_400_p2),64));

    tmp_82_fu_411_p2 <= (tmp_80_fu_400_p2 or ap_const_lv32_1);
        tmp_83_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_82_fu_411_p2),64));

    tmp_85_fu_602_p0 <= tmp_85_fu_602_p00(16 - 1 downto 0);
    tmp_85_fu_602_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_6_reg_702),32));
    tmp_85_fu_602_p1 <= omega2_fu_441_p1(16 - 1 downto 0);
    tmp_87_fu_464_p2 <= std_logic_vector(unsigned(t1_2_cast_fu_452_p1) + unsigned(u1_1_cast_fu_448_p1));
    tmp_89_fu_475_p2 <= std_logic_vector(unsigned(t2_cast_fu_460_p1) + unsigned(u2_cast_fu_456_p1));
    tmp_91_fu_486_p2 <= std_logic_vector(unsigned(u1_1_cast_fu_448_p1) - unsigned(t1_2_cast_fu_452_p1));
    tmp_92_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_569_p2),32));
    tmp_93_fu_497_p2 <= std_logic_vector(unsigned(u2_cast_fu_456_p1) - unsigned(t2_cast_fu_460_p1));
        tmp_94_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_69_fu_580_p2),32));

    tmp_98_fu_327_p3 <= 
        p_neg_t_fu_311_p2 when (tmp_63_fu_287_p3(0) = '1') else 
        tmp_74_fu_317_p4;
    tmp_99_fu_335_p3 <= 
        ap_const_lv31_0 when (tmp_62_fu_273_p3(0) = '1') else 
        tmp_98_fu_327_p3;
    tmp_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_144),64));
    tmp_s_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_fu_243_p2),64));
    u1_1_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),17));
    u1_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q1),17));
    u2_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q1),17));
end behav;
