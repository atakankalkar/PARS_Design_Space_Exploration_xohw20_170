-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clz is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (30 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of clz is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_4_fu_62_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_reg_32 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_98_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_54_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_0_phi_fu_46_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_68_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_74_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_97_fu_78_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv6_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_54_p3 = ap_const_lv1_1) or (tmp_98_fu_83_p2 = ap_const_lv1_1)))) then 
                    ap_return_preg <= ap_phi_mux_p_0_phi_fu_46_p4;
                end if; 
            end if;
        end if;
    end process;


    i_reg_32_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_54_p3 = ap_const_lv1_0) and (tmp_98_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_32 <= i_4_fu_62_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_32 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_98_fu_83_p2, tmp_fu_54_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_54_p3 = ap_const_lv1_1) or (tmp_98_fu_83_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_98_fu_83_p2, tmp_fu_54_p3)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_54_p3 = ap_const_lv1_1) or (tmp_98_fu_83_p2 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_46_p4_assign_proc : process(ap_CS_fsm_state2, i_reg_32, tmp_98_fu_83_p2, tmp_fu_54_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if (((tmp_fu_54_p3 = ap_const_lv1_0) and (tmp_98_fu_83_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_p_0_phi_fu_46_p4 <= i_reg_32;
            elsif ((tmp_fu_54_p3 = ap_const_lv1_1)) then 
                ap_phi_mux_p_0_phi_fu_46_p4 <= ap_const_lv6_20;
            else 
                ap_phi_mux_p_0_phi_fu_46_p4 <= "XXXXXX";
            end if;
        else 
            ap_phi_mux_p_0_phi_fu_46_p4 <= "XXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_98_fu_83_p2, tmp_fu_54_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_54_p3 = ap_const_lv1_1) or (tmp_98_fu_83_p2 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, tmp_98_fu_83_p2, tmp_fu_54_p3, ap_phi_mux_p_0_phi_fu_46_p4, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_54_p3 = ap_const_lv1_1) or (tmp_98_fu_83_p2 = ap_const_lv1_1)))) then 
            ap_return <= ap_phi_mux_p_0_phi_fu_46_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    i_4_fu_62_p2 <= std_logic_vector(unsigned(i_reg_32) + unsigned(ap_const_lv6_1));
    tmp_97_fu_78_p2 <= std_logic_vector(shift_right(unsigned(a),to_integer(unsigned('0' & tmp_cast_fu_74_p1(31-1 downto 0)))));
    tmp_98_fu_83_p2 <= "1" when (tmp_97_fu_78_p2 = ap_const_lv31_1) else "0";
    tmp_cast_fu_74_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_68_p2),31));
    tmp_fu_54_p3 <= i_reg_32(5 downto 5);
    tmp_s_fu_68_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(i_reg_32));
end behav;
