-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity knuth_yao_single_num is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rnd_read : IN STD_LOGIC_VECTOR (31 downto 0);
    lfsr32_i : IN STD_LOGIC_VECTOR (31 downto 0);
    lfsr32_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    lfsr32_o_ap_vld : OUT STD_LOGIC;
    lfsr31_i : IN STD_LOGIC_VECTOR (31 downto 0);
    lfsr31_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    lfsr31_o_ap_vld : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of knuth_yao_single_num is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv7_36 : STD_LOGIC_VECTOR (6 downto 0) := "0110110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv11_601 : STD_LOGIC_VECTOR (10 downto 0) := "11000000001";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv7_6D : STD_LOGIC_VECTOR (6 downto 0) := "1101101";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv13_6D : STD_LOGIC_VECTOR (12 downto 0) := "0000001101101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lut1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_ce0 : STD_LOGIC;
    signal lut1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal lut2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_ce0 : STD_LOGIC;
    signal lut2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pmat_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal pmat_ce0 : STD_LOGIC;
    signal pmat_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_get_rand_fu_231_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_20_fu_311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_21_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_clz_fu_240_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_269 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_clz_fu_240_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_32_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal rnd_assign_reg_648 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal lut1_load_reg_666 : STD_LOGIC_VECTOR (4 downto 0);
    signal sample_fu_307_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_reg_671 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal rnd_assign_cast1_fu_324_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal rnd_assign_cast1_reg_683 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_33_fu_328_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_688 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_29_reg_693 : STD_LOGIC_VECTOR (30 downto 0);
    signal sample_5_cast_fu_363_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_376_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_25_reg_716 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_415_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sample_5_fu_423_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sample_5_reg_739 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_40_fu_427_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_748 : STD_LOGIC_VECTOR (30 downto 0);
    signal sample_1_cast_fu_480_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_42_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_cast_fu_529_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_49_cast_reg_796 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_49_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal column_1_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal row_fu_578_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_50_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_589_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_reg_822 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_251_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_52_reg_827 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_get_rand_fu_231_ap_ready : STD_LOGIC;
    signal grp_get_rand_fu_231_lfsr32_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_rand_fu_231_lfsr32_o_ap_vld : STD_LOGIC;
    signal grp_get_rand_fu_231_lfsr31_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_rand_fu_231_lfsr31_o_ap_vld : STD_LOGIC;
    signal grp_clz_fu_240_ap_start : STD_LOGIC;
    signal grp_clz_fu_240_ap_idle : STD_LOGIC;
    signal grp_clz_fu_240_ap_ready : STD_LOGIC;
    signal grp_clz_fu_240_a : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_28_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal rnd_1_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal rnd_2_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_reg_167 : STD_LOGIC_VECTOR (6 downto 0);
    signal sample_7_reg_179 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_rnd_7_phi_fu_194_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal rnd_7_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_16_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_0_phi_fu_214_p14 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_0_reg_210 : STD_LOGIC_VECTOR (13 downto 0);
    signal sample_2_cast_fu_614_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_47_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_clz_fu_240_ap_start : STD_LOGIC := '0';
    signal tmp_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal distance_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_cast_fu_446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_2_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_3_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rnd_4_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_3_cast_cast_fu_343_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sample_3_fu_346_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sample_4_fu_352_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sample_5_cast1_fu_359_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_fu_379_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_390_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal index_1_fu_383_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal distance_1_fu_419_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_7_cast_cast_fu_460_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sample_6_fu_463_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sample_1_fu_469_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sample_1_cast8_fu_476_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_44_fu_493_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_45_fu_497_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_640_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal pmat_load_cast_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_9_cast1_cast_s_fu_593_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sample_8_fu_597_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sample_2_fu_603_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sample_2_cast7_fu_610_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_0_cast_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_640_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_640_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_640_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_640_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_condition_526 : BOOLEAN;

    component get_rand IS
    port (
        ap_ready : OUT STD_LOGIC;
        lfsr32_i : IN STD_LOGIC_VECTOR (31 downto 0);
        lfsr32_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        lfsr32_o_ap_vld : OUT STD_LOGIC;
        lfsr31_i : IN STD_LOGIC_VECTOR (31 downto 0);
        lfsr31_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        lfsr31_o_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component clz IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (30 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component RLWE_enc2_mac_muleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component knuth_yao_single_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component knuth_yao_single_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component knuth_yao_single_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lut1_U : component knuth_yao_single_bkb
    generic map (
        DataWidth => 5,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut1_address0,
        ce0 => lut1_ce0,
        q0 => lut1_q0);

    lut2_U : component knuth_yao_single_cud
    generic map (
        DataWidth => 6,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut2_address0,
        ce0 => lut2_ce0,
        q0 => lut2_q0);

    pmat_U : component knuth_yao_single_dEe
    generic map (
        DataWidth => 1,
        AddressRange => 5995,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pmat_address0,
        ce0 => pmat_ce0,
        q0 => pmat_q0);

    grp_get_rand_fu_231 : component get_rand
    port map (
        ap_ready => grp_get_rand_fu_231_ap_ready,
        lfsr32_i => lfsr32_i,
        lfsr32_o => grp_get_rand_fu_231_lfsr32_o,
        lfsr32_o_ap_vld => grp_get_rand_fu_231_lfsr32_o_ap_vld,
        lfsr31_i => lfsr31_i,
        lfsr31_o => grp_get_rand_fu_231_lfsr31_o,
        lfsr31_o_ap_vld => grp_get_rand_fu_231_lfsr31_o_ap_vld,
        ap_return => grp_get_rand_fu_231_ap_return);

    grp_clz_fu_240 : component clz
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_clz_fu_240_ap_start,
        ap_done => grp_clz_fu_240_ap_done,
        ap_idle => grp_clz_fu_240_ap_idle,
        ap_ready => grp_clz_fu_240_ap_ready,
        a => grp_clz_fu_240_a,
        ap_return => grp_clz_fu_240_ap_return);

    RLWE_enc2_mac_muleOg_U4 : component RLWE_enc2_mac_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_640_p0,
        din1 => grp_fu_640_p1,
        din2 => grp_fu_640_p2,
        dout => grp_fu_640_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_clz_fu_240_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_clz_fu_240_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_20_fu_311_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_50_fu_570_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((tmp_40_fu_427_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                    ap_reg_grp_clz_fu_240_ap_start <= ap_const_logic_1;
                elsif ((grp_clz_fu_240_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_clz_fu_240_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_return_0_preg <= p_0_cast_fu_624_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_return_1_preg <= ap_phi_mux_rnd_7_phi_fu_194_p14;
                end if; 
            end if;
        end if;
    end process;


    column_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_49_fu_538_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                column_reg_167 <= column_1_fu_554_p2;
            elsif (((tmp_40_fu_427_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                column_reg_167 <= ap_const_lv7_D;
            end if; 
        end if;
    end process;

    distance_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_50_fu_570_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                distance_fu_90 <= distance_3_fu_564_p2;
            elsif (((tmp_42_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                distance_fu_90 <= distance_2_fu_501_p3;
            elsif (((tmp_40_fu_427_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                distance_fu_90 <= distance_cast_fu_446_p1;
            end if; 
        end if;
    end process;

    p_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_42_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                p_0_reg_210 <= ap_const_lv14_3FFF;
            elsif ((((grp_fu_279_p2 = ap_const_lv1_1) and (tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (grp_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                p_0_reg_210 <= sample_2_cast_fu_614_p1;
            elsif ((((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
                p_0_reg_210 <= sample_1_cast_fu_480_p1;
            elsif ((((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((grp_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                p_0_reg_210 <= sample_5_cast_fu_363_p1;
            end if; 
        end if;
    end process;

    rnd_1_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((tmp_21_fu_370_p2 = ap_const_lv1_0)) then 
                    rnd_1_reg_149 <= tmp_6_reg_660;
                elsif ((tmp_21_fu_370_p2 = ap_const_lv1_1)) then 
                    rnd_1_reg_149 <= grp_get_rand_fu_231_ap_return;
                end if;
            end if; 
        end if;
    end process;

    rnd_2_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                if ((tmp_32_fu_404_p2 = ap_const_lv1_0)) then 
                    rnd_2_reg_158 <= tmp_10_fu_400_p1;
                elsif ((tmp_32_fu_404_p2 = ap_const_lv1_1)) then 
                    rnd_2_reg_158 <= grp_get_rand_fu_231_ap_return;
                end if;
            end if; 
        end if;
    end process;

    rnd_4_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_47_fu_513_p2 = ap_const_lv1_1) and (tmp_42_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                rnd_4_fu_94 <= grp_get_rand_fu_231_ap_return;
            elsif (((tmp_42_fu_487_p2 = ap_const_lv1_1) and (tmp_47_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                rnd_4_fu_94 <= tmp_13_fu_509_p1;
            elsif (((tmp_40_fu_427_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                rnd_4_fu_94 <= rnd_2_reg_158;
            end if; 
        end if;
    end process;

    rnd_7_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_42_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                rnd_7_reg_191 <= rnd_4_fu_94;
            elsif (((tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (grp_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                rnd_7_reg_191 <= tmp_16_fu_620_p1;
            elsif (((grp_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                rnd_7_reg_191 <= tmp_12_fu_484_p1;
            elsif (((grp_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                rnd_7_reg_191 <= tmp_9_fu_367_p1;
            elsif ((((grp_fu_279_p2 = ap_const_lv1_1) and (tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                rnd_7_reg_191 <= grp_get_rand_fu_231_ap_return;
            end if; 
        end if;
    end process;

    sample_7_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_50_fu_570_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                sample_7_reg_179 <= row_fu_578_p2;
            elsif (((tmp_42_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                sample_7_reg_179 <= ap_const_lv7_36;
            end if; 
        end if;
    end process;

    tmp_28_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_20_fu_311_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                if ((tmp_22_fu_319_p2 = ap_const_lv1_0)) then 
                    tmp_28_reg_140 <= tmp_6_fu_304_p1;
                elsif ((tmp_22_fu_319_p2 = ap_const_lv1_1)) then 
                    tmp_28_reg_140 <= grp_get_rand_fu_231_ap_return;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                lut1_load_reg_666 <= lut1_q0;
                sample_reg_671 <= sample_fu_307_p1;
                tmp_20_reg_676 <= lut1_q0(4 downto 4);
                    tmp_6_reg_660(23 downto 0) <= tmp_6_fu_304_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_clz_fu_240_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_clz_fu_240_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_clz_fu_240_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_clz_fu_240_ap_done = ap_const_logic_1)))) then
                reg_269 <= grp_clz_fu_240_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_20_fu_311_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    rnd_assign_cast1_reg_683(23 downto 0) <= rnd_assign_cast1_fu_324_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                rnd_assign_reg_648 <= rnd_read(31 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                sample_5_reg_739 <= sample_5_fu_423_p1;
                tmp_35_reg_734 <= tmp_35_fu_415_p1;
                tmp_40_reg_744 <= lut2_q0(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_25_reg_716 <= tmp_25_fu_376_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_29_reg_693 <= tmp_28_reg_140(31 downto 1);
                tmp_33_reg_688 <= tmp_33_fu_328_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_40_fu_427_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_38_reg_748 <= rnd_2_reg_158(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_42_reg_789 <= tmp_42_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_42_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    tmp_49_cast_reg_796(6 downto 0) <= tmp_49_cast_fu_529_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_50_fu_570_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_51_reg_822 <= tmp_51_fu_589_p1;
                tmp_52_reg_827 <= rnd_4_fu_94(31 downto 1);
            end if;
        end if;
    end process;
    tmp_6_reg_660(31 downto 24) <= "00000000";
    rnd_assign_cast1_reg_683(30 downto 24) <= "0000000";
    tmp_49_cast_reg_796(12 downto 7) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_20_fu_311_p3, ap_CS_fsm_state4, grp_clz_fu_240_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state9, tmp_40_fu_427_p3, ap_CS_fsm_state12, tmp_42_fu_487_p2, ap_CS_fsm_state13, tmp_49_fu_538_p3, ap_CS_fsm_state14, tmp_50_fu_570_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_20_fu_311_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_clz_fu_240_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_clz_fu_240_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((tmp_40_fu_427_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_clz_fu_240_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state12 => 
                if (((tmp_42_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((tmp_49_fu_538_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((tmp_50_fu_570_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_clz_fu_240_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_526_assign_proc : process(tmp_20_reg_676, tmp_40_reg_744, tmp_42_reg_789, ap_CS_fsm_state16)
    begin
                ap_condition_526 <= ((tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_214_p14_assign_proc : process(grp_fu_279_p2, tmp_20_reg_676, tmp_40_reg_744, tmp_42_reg_789, ap_CS_fsm_state16, p_0_reg_210, sample_2_cast_fu_614_p1)
    begin
        if ((((grp_fu_279_p2 = ap_const_lv1_1) and (tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (grp_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            ap_phi_mux_p_0_phi_fu_214_p14 <= sample_2_cast_fu_614_p1;
        else 
            ap_phi_mux_p_0_phi_fu_214_p14 <= p_0_reg_210;
        end if; 
    end process;


    ap_phi_mux_rnd_7_phi_fu_194_p14_assign_proc : process(grp_get_rand_fu_231_ap_return, grp_fu_279_p2, rnd_7_reg_191, tmp_16_fu_620_p1, ap_condition_526)
    begin
        if ((ap_const_boolean_1 = ap_condition_526)) then
            if ((grp_fu_279_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_rnd_7_phi_fu_194_p14 <= tmp_16_fu_620_p1;
            elsif ((grp_fu_279_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_rnd_7_phi_fu_194_p14 <= grp_get_rand_fu_231_ap_return;
            else 
                ap_phi_mux_rnd_7_phi_fu_194_p14 <= rnd_7_reg_191;
            end if;
        else 
            ap_phi_mux_rnd_7_phi_fu_194_p14 <= rnd_7_reg_191;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state16, p_0_cast_fu_624_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_return_0 <= p_0_cast_fu_624_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_phi_mux_rnd_7_phi_fu_194_p14, ap_CS_fsm_state16, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_return_1 <= ap_phi_mux_rnd_7_phi_fu_194_p14;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    column_1_fu_554_p2 <= std_logic_vector(unsigned(column_reg_167) + unsigned(ap_const_lv7_1));
    distance_1_fu_419_p1 <= lut2_q0(4 - 1 downto 0);
    distance_2_fu_501_p3 <= (tmp_44_fu_493_p1 & tmp_45_fu_497_p1);
    distance_3_fu_564_p2 <= std_logic_vector(unsigned(distance_fu_90) - unsigned(pmat_load_cast_fu_560_p1));
    distance_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(distance_1_fu_419_p1),32));

    grp_clz_fu_240_a_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state15, rnd_assign_cast1_reg_683, tmp_29_reg_693, tmp_38_reg_748, tmp_52_reg_827)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_clz_fu_240_a <= tmp_52_reg_827;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_clz_fu_240_a <= tmp_38_reg_748;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_clz_fu_240_a <= tmp_29_reg_693;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_clz_fu_240_a <= rnd_assign_cast1_reg_683;
        else 
            grp_clz_fu_240_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_clz_fu_240_ap_start <= ap_reg_grp_clz_fu_240_ap_start;
    grp_fu_251_p4 <= rnd_4_fu_94(31 downto 1);
    grp_fu_279_p2 <= "1" when (unsigned(reg_269) > unsigned(ap_const_lv6_17)) else "0";
    grp_fu_640_p0 <= grp_fu_640_p00(7 - 1 downto 0);
    grp_fu_640_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sample_7_reg_179),13));
    grp_fu_640_p1 <= ap_const_lv13_6D(8 - 1 downto 0);
    grp_fu_640_p2 <= tmp_49_cast_reg_796(7 - 1 downto 0);
    index_1_fu_383_p3 <= (tmp_25_reg_716 & tmp_24_fu_379_p1);
    index_fu_285_p1 <= rnd_read(8 - 1 downto 0);

    lfsr31_o_assign_proc : process(lfsr31_i, ap_CS_fsm_state2, tmp_20_fu_311_p3, tmp_22_fu_319_p2, ap_CS_fsm_state5, grp_fu_279_p2, ap_CS_fsm_state7, tmp_21_fu_370_p2, ap_CS_fsm_state8, tmp_32_fu_404_p2, ap_CS_fsm_state11, tmp_20_reg_676, tmp_40_reg_744, ap_CS_fsm_state12, tmp_42_fu_487_p2, tmp_42_reg_789, grp_get_rand_fu_231_lfsr31_o, grp_get_rand_fu_231_lfsr31_o_ap_vld, ap_CS_fsm_state16, tmp_47_fu_513_p2)
    begin
        if ((((tmp_21_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (grp_get_rand_fu_231_lfsr31_o_ap_vld = ap_const_logic_1)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16) and (grp_get_rand_fu_231_lfsr31_o_ap_vld = ap_const_logic_1)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (grp_get_rand_fu_231_lfsr31_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (grp_get_rand_fu_231_lfsr31_o_ap_vld = ap_const_logic_1)) or ((tmp_22_fu_319_p2 = ap_const_lv1_1) and (tmp_20_fu_311_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_get_rand_fu_231_lfsr31_o_ap_vld = ap_const_logic_1)) or ((tmp_47_fu_513_p2 = ap_const_lv1_1) and (tmp_42_fu_487_p2 = ap_const_lv1_1) and (grp_get_rand_fu_231_lfsr31_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((tmp_32_fu_404_p2 = ap_const_lv1_1) and (grp_get_rand_fu_231_lfsr31_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            lfsr31_o <= grp_get_rand_fu_231_lfsr31_o;
        else 
            lfsr31_o <= lfsr31_i;
        end if; 
    end process;


    lfsr31_o_ap_vld_assign_proc : process(ap_CS_fsm_state2, tmp_20_fu_311_p3, tmp_22_fu_319_p2, ap_CS_fsm_state5, grp_fu_279_p2, ap_CS_fsm_state7, tmp_21_fu_370_p2, ap_CS_fsm_state8, tmp_32_fu_404_p2, ap_CS_fsm_state11, tmp_20_reg_676, tmp_40_reg_744, ap_CS_fsm_state12, tmp_42_fu_487_p2, tmp_42_reg_789, grp_get_rand_fu_231_lfsr31_o_ap_vld, ap_CS_fsm_state16, tmp_47_fu_513_p2)
    begin
        if ((((tmp_21_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_22_fu_319_p2 = ap_const_lv1_1) and (tmp_20_fu_311_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_47_fu_513_p2 = ap_const_lv1_1) and (tmp_42_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((tmp_32_fu_404_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            lfsr31_o_ap_vld <= grp_get_rand_fu_231_lfsr31_o_ap_vld;
        else 
            lfsr31_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    lfsr32_o_assign_proc : process(lfsr32_i, ap_CS_fsm_state2, tmp_20_fu_311_p3, tmp_22_fu_319_p2, ap_CS_fsm_state5, grp_fu_279_p2, ap_CS_fsm_state7, tmp_21_fu_370_p2, ap_CS_fsm_state8, tmp_32_fu_404_p2, ap_CS_fsm_state11, tmp_20_reg_676, tmp_40_reg_744, ap_CS_fsm_state12, tmp_42_fu_487_p2, tmp_42_reg_789, grp_get_rand_fu_231_lfsr32_o, grp_get_rand_fu_231_lfsr32_o_ap_vld, ap_CS_fsm_state16, tmp_47_fu_513_p2)
    begin
        if ((((tmp_21_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (grp_get_rand_fu_231_lfsr32_o_ap_vld = ap_const_logic_1)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16) and (grp_get_rand_fu_231_lfsr32_o_ap_vld = ap_const_logic_1)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (grp_get_rand_fu_231_lfsr32_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (grp_get_rand_fu_231_lfsr32_o_ap_vld = ap_const_logic_1)) or ((tmp_22_fu_319_p2 = ap_const_lv1_1) and (tmp_20_fu_311_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_get_rand_fu_231_lfsr32_o_ap_vld = ap_const_logic_1)) or ((tmp_47_fu_513_p2 = ap_const_lv1_1) and (tmp_42_fu_487_p2 = ap_const_lv1_1) and (grp_get_rand_fu_231_lfsr32_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((tmp_32_fu_404_p2 = ap_const_lv1_1) and (grp_get_rand_fu_231_lfsr32_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            lfsr32_o <= grp_get_rand_fu_231_lfsr32_o;
        else 
            lfsr32_o <= lfsr32_i;
        end if; 
    end process;


    lfsr32_o_ap_vld_assign_proc : process(ap_CS_fsm_state2, tmp_20_fu_311_p3, tmp_22_fu_319_p2, ap_CS_fsm_state5, grp_fu_279_p2, ap_CS_fsm_state7, tmp_21_fu_370_p2, ap_CS_fsm_state8, tmp_32_fu_404_p2, ap_CS_fsm_state11, tmp_20_reg_676, tmp_40_reg_744, ap_CS_fsm_state12, tmp_42_fu_487_p2, tmp_42_reg_789, grp_get_rand_fu_231_lfsr32_o_ap_vld, ap_CS_fsm_state16, tmp_47_fu_513_p2)
    begin
        if ((((tmp_21_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (tmp_42_reg_789 = ap_const_lv1_1) and (tmp_40_reg_744 = ap_const_lv1_1) and (tmp_20_reg_676 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_22_fu_319_p2 = ap_const_lv1_1) and (tmp_20_fu_311_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_47_fu_513_p2 = ap_const_lv1_1) and (tmp_42_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((tmp_32_fu_404_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            lfsr32_o_ap_vld <= grp_get_rand_fu_231_lfsr32_o_ap_vld;
        else 
            lfsr32_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lut1_address0 <= tmp_fu_299_p1(8 - 1 downto 0);

    lut1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            lut1_ce0 <= ap_const_logic_1;
        else 
            lut1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut2_address0 <= tmp_36_fu_410_p1(8 - 1 downto 0);

    lut2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            lut2_ce0 <= ap_const_logic_1;
        else 
            lut2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        p_0_cast_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_0_phi_fu_214_p14),32));

    pmat_address0 <= tmp_15_cast_fu_550_p1(13 - 1 downto 0);

    pmat_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pmat_ce0 <= ap_const_logic_1;
        else 
            pmat_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pmat_load_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pmat_q0),32));
    rnd_assign_cast1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rnd_assign_reg_648),31));
    row_fu_578_p2 <= std_logic_vector(unsigned(sample_7_reg_179) + unsigned(ap_const_lv7_7F));
        sample_1_cast8_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sample_1_fu_469_p3),13));

    sample_1_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sample_1_cast8_fu_476_p1),14));
    sample_1_fu_469_p3 <= 
        sample_6_fu_463_p2 when (tmp_35_reg_734(0) = '1') else 
        sample_7_cast_cast_fu_460_p1;
        sample_2_cast7_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sample_2_fu_603_p3),13));

    sample_2_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sample_2_cast7_fu_610_p1),14));
    sample_2_fu_603_p3 <= 
        sample_8_fu_597_p2 when (tmp_51_reg_822(0) = '1') else 
        sample_9_cast1_cast_s_fu_593_p1;
    sample_3_cast_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sample_reg_671),11));
    sample_3_fu_346_p2 <= std_logic_vector(signed(ap_const_lv11_601) - signed(sample_3_cast_cast_fu_343_p1));
    sample_4_fu_352_p3 <= 
        sample_3_fu_346_p2 when (tmp_33_reg_688(0) = '1') else 
        sample_3_cast_cast_fu_343_p1;
        sample_5_cast1_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sample_4_fu_352_p3),13));

    sample_5_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sample_5_cast1_fu_359_p1),14));
    sample_5_fu_423_p1 <= lut2_q0(5 - 1 downto 0);
    sample_6_fu_463_p2 <= std_logic_vector(signed(ap_const_lv11_601) - signed(sample_7_cast_cast_fu_460_p1));
    sample_7_cast_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sample_5_reg_739),11));
    sample_8_fu_597_p2 <= std_logic_vector(signed(ap_const_lv11_601) - signed(sample_9_cast1_cast_s_fu_593_p1));
    sample_9_cast1_cast_s_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sample_7_reg_179),11));
    sample_fu_307_p1 <= lut1_q0(4 - 1 downto 0);
    tmp_10_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_390_p4),32));
    tmp_12_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_reg_748),32));
    tmp_13_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_251_p4),32));
    tmp_15_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_640_p3),64));
    tmp_16_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_reg_827),32));
    tmp_20_fu_311_p3 <= lut1_q0(4 downto 4);
    tmp_21_fu_370_p2 <= "1" when (unsigned(reg_269) > unsigned(ap_const_lv6_1A)) else "0";
    tmp_22_fu_319_p2 <= "1" when (rnd_assign_reg_648 = ap_const_lv24_1) else "0";
    tmp_24_fu_379_p1 <= rnd_1_reg_149(5 - 1 downto 0);
    tmp_25_fu_376_p1 <= lut1_load_reg_666(3 - 1 downto 0);
    tmp_26_fu_390_p4 <= rnd_1_reg_149(31 downto 5);
    tmp_32_fu_404_p2 <= "1" when (tmp_26_fu_390_p4 = ap_const_lv27_1) else "0";
    tmp_33_fu_328_p1 <= tmp_28_reg_140(1 - 1 downto 0);
    tmp_35_fu_415_p1 <= rnd_2_reg_158(1 - 1 downto 0);
    tmp_36_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_fu_383_p3),64));
    tmp_40_fu_427_p3 <= lut2_q0(5 downto 5);
    tmp_42_fu_487_p2 <= "1" when (unsigned(column_reg_167) < unsigned(ap_const_lv7_6D)) else "0";
    tmp_44_fu_493_p1 <= distance_fu_90(31 - 1 downto 0);
    tmp_45_fu_497_p1 <= rnd_4_fu_94(1 - 1 downto 0);
    tmp_47_fu_513_p2 <= "1" when (grp_fu_251_p4 = ap_const_lv31_1) else "0";
    tmp_49_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_reg_167),13));
    tmp_49_fu_538_p3 <= sample_7_reg_179(6 downto 6);
    tmp_50_fu_570_p3 <= distance_3_fu_564_p2(31 downto 31);
    tmp_51_fu_589_p1 <= rnd_4_fu_94(1 - 1 downto 0);
    tmp_6_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rnd_assign_reg_648),32));
    tmp_9_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_reg_693),32));
    tmp_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_285_p1),64));
end behav;
