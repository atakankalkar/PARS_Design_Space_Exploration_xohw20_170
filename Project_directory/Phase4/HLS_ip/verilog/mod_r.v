// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mod_r (
        ap_clk,
        ap_rst,
        x,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] x;
output  [14:0] ap_return;
input   ap_ce;

reg[14:0] ap_return;

reg   [31:0] x_read_reg_171;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] ap_reg_pp0_iter1_x_read_reg_171;
reg   [31:0] ap_reg_pp0_iter2_x_read_reg_171;
wire   [31:0] lowbits_r_fu_56_p1;
reg   [31:0] lowbits_r_reg_181;
reg   [31:0] lowbits_l_reg_186;
wire   [44:0] pp2_fu_82_p2;
reg   [44:0] pp2_reg_191;
reg   [12:0] tmp_7_reg_196;
wire    ap_block_pp0_stage0;
wire   [52:0] grp_fu_50_p0;
wire   [63:0] grp_fu_50_p2;
wire   [31:0] pp1_fu_73_p1;
wire   [31:0] pp2_fu_82_p1;
wire   [44:0] pp1_fu_73_p2;
wire   [44:0] pp1_1_cast_fu_98_p1;
wire   [44:0] pp2_1_fu_101_p2;
wire   [12:0] tmp_8_fu_106_p4;
wire   [0:0] tmp_5_fu_120_p3;
wire   [13:0] ret3_cast_fu_116_p1;
wire   [13:0] tmp_29_cast_cast_fu_127_p3;
wire   [13:0] ret3_fu_135_p2;
wire   [13:0] tmp_s_fu_153_p2;
wire   [0:0] tmp_6_fu_141_p3;
wire   [14:0] tmp_33_cast_fu_159_p1;
wire  signed [14:0] tmp_32_cast_fu_149_p1;
reg    grp_fu_50_ce;
wire   [14:0] tmp_2_fu_163_p3;
reg    ap_ce_reg;
reg  signed [31:0] x_int_reg;
reg   [14:0] ap_return_int_reg;
wire   [44:0] pp1_fu_73_p10;
wire   [44:0] pp2_fu_82_p10;

encdec_mul_53ns_36jw #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 53 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
encdec_mul_53ns_36jw_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_50_p0),
    .din1(x_int_reg),
    .ce(grp_fu_50_ce),
    .dout(grp_fu_50_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        ap_reg_pp0_iter1_x_read_reg_171 <= x_read_reg_171;
        ap_reg_pp0_iter2_x_read_reg_171 <= ap_reg_pp0_iter1_x_read_reg_171;
        lowbits_l_reg_186 <= {{grp_fu_50_p2[63:32]}};
        lowbits_r_reg_181 <= lowbits_r_fu_56_p1;
        pp2_reg_191 <= pp2_fu_82_p2;
        tmp_7_reg_196 <= {{pp1_fu_73_p2[44:32]}};
        x_read_reg_171 <= x_int_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= tmp_2_fu_163_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        x_int_reg <= x;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = tmp_2_fu_163_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_50_ce = 1'b1;
    end else begin
        grp_fu_50_ce = 1'b0;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign grp_fu_50_p0 = 64'd2401607092007494;

assign lowbits_r_fu_56_p1 = grp_fu_50_p2[31:0];

assign pp1_1_cast_fu_98_p1 = tmp_7_reg_196;

assign pp1_fu_73_p1 = pp1_fu_73_p10;

assign pp1_fu_73_p10 = lowbits_r_reg_181;

assign pp1_fu_73_p2 = (45'd7681 * pp1_fu_73_p1);

assign pp2_1_fu_101_p2 = (pp1_1_cast_fu_98_p1 + pp2_reg_191);

assign pp2_fu_82_p1 = pp2_fu_82_p10;

assign pp2_fu_82_p10 = lowbits_l_reg_186;

assign pp2_fu_82_p2 = (45'd7681 * pp2_fu_82_p1);

assign ret3_cast_fu_116_p1 = tmp_8_fu_106_p4;

assign ret3_fu_135_p2 = (ret3_cast_fu_116_p1 - tmp_29_cast_cast_fu_127_p3);

assign tmp_29_cast_cast_fu_127_p3 = ((tmp_5_fu_120_p3[0:0] === 1'b1) ? 14'd7680 : 14'd0);

assign tmp_2_fu_163_p3 = ((tmp_6_fu_141_p3[0:0] === 1'b1) ? tmp_33_cast_fu_159_p1 : tmp_32_cast_fu_149_p1);

assign tmp_32_cast_fu_149_p1 = $signed(ret3_fu_135_p2);

assign tmp_33_cast_fu_159_p1 = tmp_s_fu_153_p2;

assign tmp_5_fu_120_p3 = ap_reg_pp0_iter2_x_read_reg_171[32'd31];

assign tmp_6_fu_141_p3 = ret3_fu_135_p2[32'd13];

assign tmp_8_fu_106_p4 = {{pp2_1_fu_101_p2[44:32]}};

assign tmp_s_fu_153_p2 = (14'd7681 + ret3_fu_135_p2);

endmodule //mod_r
