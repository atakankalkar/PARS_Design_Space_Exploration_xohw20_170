-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encryptdecrypt is
generic (
    C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_WVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_WREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH/8-1 downto 0);
    s_axi_S_AXI_BUNDLE_ARVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_ARREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_RVALID : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_RREADY : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_S_AXI_BUNDLE_BVALID : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_BREADY : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of encryptdecrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encryptdecrypt,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.352750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=181,HLS_SYN_FF=13765,HLS_SYN_LUT=16695}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_ce0 : STD_LOGIC;
    signal c1_we0 : STD_LOGIC;
    signal c1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_ce0 : STD_LOGIC;
    signal c2_we0 : STD_LOGIC;
    signal c2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r2_ce0 : STD_LOGIC;
    signal r2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_i_i_reg_228 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_i3_i_reg_239 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_mod_r_fu_390_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_395 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_i_i_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_i_i_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_state13_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state17_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state19_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal exitcond_i4_i_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_exitcond_i4_i_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_i_i_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_i_i_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_405_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_482 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal c1_addr_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter1_c1_addr_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_c1_addr_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_c1_addr_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_170_i_i_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_170_i_i_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond_i4_i_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_i4_i_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter3_exitcond_i4_i_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_fu_436_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_9_reg_506 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal c1_addr_1_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter1_c1_addr_1_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter2_c1_addr_1_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp1_iter3_c1_addr_1_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_176_i_i_cast_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_RLWE_enc2_fu_250_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal grp_RLWE_enc2_fu_250_ap_start : STD_LOGIC;
    signal grp_RLWE_enc2_fu_250_ap_idle : STD_LOGIC;
    signal grp_RLWE_enc2_fu_250_ap_ready : STD_LOGIC;
    signal grp_RLWE_enc2_fu_250_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_250_a_ce0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_250_c1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_250_c1_ce0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_250_c1_we0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_250_c1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_RLWE_enc2_fu_250_c2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_250_c2_ce0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_250_c2_we0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_250_c2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_RLWE_enc2_fu_250_m_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_250_m_ce0 : STD_LOGIC;
    signal grp_RLWE_enc2_fu_250_p_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_RLWE_enc2_fu_250_p_ce0 : STD_LOGIC;
    signal grp_inv_ntt2_fu_384_ap_start : STD_LOGIC;
    signal grp_inv_ntt2_fu_384_ap_done : STD_LOGIC;
    signal grp_inv_ntt2_fu_384_ap_idle : STD_LOGIC;
    signal grp_inv_ntt2_fu_384_ap_ready : STD_LOGIC;
    signal grp_inv_ntt2_fu_384_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_inv_ntt2_fu_384_a_ce0 : STD_LOGIC;
    signal grp_inv_ntt2_fu_384_a_we0 : STD_LOGIC;
    signal grp_inv_ntt2_fu_384_a_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mod_r_fu_390_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mod_r_fu_390_ap_ce : STD_LOGIC;
    signal ap_phi_mux_j_i_i_phi_fu_232_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_i3_i_phi_fu_243_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_reg_grp_RLWE_enc2_fu_250_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_inv_ntt2_fu_384_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal tmp_i_i_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_i_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_trunc_ext_fu_425_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal p_trunc3_ext_fu_467_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i8_i_cast_fu_448_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_175_i_i_cast_fu_452_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_176_i_i_fu_456_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_170_i_i_fu_472_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_170_i_i_fu_472_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal tmp_170_i_i_fu_472_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_170_i_i_fu_472_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component RLWE_enc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c1_ce0 : OUT STD_LOGIC;
        c1_we0 : OUT STD_LOGIC;
        c1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c2_ce0 : OUT STD_LOGIC;
        c2_we0 : OUT STD_LOGIC;
        c2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component inv_ntt2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mod_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component encryptdecrypt_mu8jQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encryptdecrypt_S_AXI_BUNDLE_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_ce0 : IN STD_LOGIC;
        a_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c1_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c1_ce0 : IN STD_LOGIC;
        c1_we0 : IN STD_LOGIC;
        c1_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c2_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c2_ce0 : IN STD_LOGIC;
        c2_we0 : IN STD_LOGIC;
        c2_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        c2_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_ce0 : IN STD_LOGIC;
        m_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ce0 : IN STD_LOGIC;
        p_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r2_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        r2_ce0 : IN STD_LOGIC;
        r2_q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    encryptdecrypt_S_AXI_BUNDLE_s_axi_U : component encryptdecrypt_S_AXI_BUNDLE_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_S_AXI_BUNDLE_AWVALID,
        AWREADY => s_axi_S_AXI_BUNDLE_AWREADY,
        AWADDR => s_axi_S_AXI_BUNDLE_AWADDR,
        WVALID => s_axi_S_AXI_BUNDLE_WVALID,
        WREADY => s_axi_S_AXI_BUNDLE_WREADY,
        WDATA => s_axi_S_AXI_BUNDLE_WDATA,
        WSTRB => s_axi_S_AXI_BUNDLE_WSTRB,
        ARVALID => s_axi_S_AXI_BUNDLE_ARVALID,
        ARREADY => s_axi_S_AXI_BUNDLE_ARREADY,
        ARADDR => s_axi_S_AXI_BUNDLE_ARADDR,
        RVALID => s_axi_S_AXI_BUNDLE_RVALID,
        RREADY => s_axi_S_AXI_BUNDLE_RREADY,
        RDATA => s_axi_S_AXI_BUNDLE_RDATA,
        RRESP => s_axi_S_AXI_BUNDLE_RRESP,
        BVALID => s_axi_S_AXI_BUNDLE_BVALID,
        BREADY => s_axi_S_AXI_BUNDLE_BREADY,
        BRESP => s_axi_S_AXI_BUNDLE_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a_address0 => grp_RLWE_enc2_fu_250_a_address0,
        a_ce0 => grp_RLWE_enc2_fu_250_a_ce0,
        a_q0 => a_q0,
        c1_address0 => c1_address0,
        c1_ce0 => c1_ce0,
        c1_we0 => c1_we0,
        c1_d0 => c1_d0,
        c1_q0 => c1_q0,
        c2_address0 => c2_address0,
        c2_ce0 => c2_ce0,
        c2_we0 => c2_we0,
        c2_d0 => grp_RLWE_enc2_fu_250_c2_d0,
        c2_q0 => c2_q0,
        m_address0 => grp_RLWE_enc2_fu_250_m_address0,
        m_ce0 => grp_RLWE_enc2_fu_250_m_ce0,
        m_q0 => m_q0,
        p_address0 => grp_RLWE_enc2_fu_250_p_address0,
        p_ce0 => grp_RLWE_enc2_fu_250_p_ce0,
        p_q0 => p_q0,
        r2_address0 => r2_address0,
        r2_ce0 => r2_ce0,
        r2_q0 => r2_q0);

    grp_RLWE_enc2_fu_250 : component RLWE_enc2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_RLWE_enc2_fu_250_ap_start,
        ap_done => grp_RLWE_enc2_fu_250_ap_done,
        ap_idle => grp_RLWE_enc2_fu_250_ap_idle,
        ap_ready => grp_RLWE_enc2_fu_250_ap_ready,
        a_address0 => grp_RLWE_enc2_fu_250_a_address0,
        a_ce0 => grp_RLWE_enc2_fu_250_a_ce0,
        a_q0 => a_q0,
        c1_address0 => grp_RLWE_enc2_fu_250_c1_address0,
        c1_ce0 => grp_RLWE_enc2_fu_250_c1_ce0,
        c1_we0 => grp_RLWE_enc2_fu_250_c1_we0,
        c1_d0 => grp_RLWE_enc2_fu_250_c1_d0,
        c1_q0 => c1_q0,
        c2_address0 => grp_RLWE_enc2_fu_250_c2_address0,
        c2_ce0 => grp_RLWE_enc2_fu_250_c2_ce0,
        c2_we0 => grp_RLWE_enc2_fu_250_c2_we0,
        c2_d0 => grp_RLWE_enc2_fu_250_c2_d0,
        c2_q0 => c2_q0,
        m_address0 => grp_RLWE_enc2_fu_250_m_address0,
        m_ce0 => grp_RLWE_enc2_fu_250_m_ce0,
        m_q0 => m_q0,
        p_address0 => grp_RLWE_enc2_fu_250_p_address0,
        p_ce0 => grp_RLWE_enc2_fu_250_p_ce0,
        p_q0 => p_q0);

    grp_inv_ntt2_fu_384 : component inv_ntt2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_inv_ntt2_fu_384_ap_start,
        ap_done => grp_inv_ntt2_fu_384_ap_done,
        ap_idle => grp_inv_ntt2_fu_384_ap_idle,
        ap_ready => grp_inv_ntt2_fu_384_ap_ready,
        a_address0 => grp_inv_ntt2_fu_384_a_address0,
        a_ce0 => grp_inv_ntt2_fu_384_a_ce0,
        a_we0 => grp_inv_ntt2_fu_384_a_we0,
        a_d0 => grp_inv_ntt2_fu_384_a_d0,
        a_q0 => c1_q0);

    grp_mod_r_fu_390 : component mod_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x => grp_mod_r_fu_390_x,
        ap_return => grp_mod_r_fu_390_ap_return,
        ap_ce => grp_mod_r_fu_390_ap_ce);

    encryptdecrypt_mu8jQ_U99 : component encryptdecrypt_mu8jQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_170_i_i_fu_472_p0,
        din1 => tmp_170_i_i_fu_472_p1,
        dout => tmp_170_i_i_fu_472_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_RLWE_enc2_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((grp_RLWE_enc2_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_RLWE_enc2_fu_250_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_RLWE_enc2_fu_250_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_reg_grp_RLWE_enc2_fu_250_ap_start <= ap_const_logic_1;
                elsif ((grp_RLWE_enc2_fu_250_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_RLWE_enc2_fu_250_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_inv_ntt2_fu_384_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_inv_ntt2_fu_384_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_reg_grp_inv_ntt2_fu_384_ap_start <= ap_const_logic_1;
                elsif ((grp_inv_ntt2_fu_384_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_inv_ntt2_fu_384_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_i3_i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_i3_i_reg_239 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i4_i_reg_502 = ap_const_lv1_0))) then 
                j_i3_i_reg_239 <= j_9_reg_506;
            end if; 
        end if;
    end process;

    j_i_i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_reg_478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_i_i_reg_228 <= j_reg_482;
            elsif (((grp_RLWE_enc2_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_i_reg_228 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_c1_addr_reg_487 <= c1_addr_reg_487;
                ap_reg_pp0_iter1_exitcond_i_i_reg_478 <= exitcond_i_i_reg_478;
                ap_reg_pp0_iter2_c1_addr_reg_487 <= ap_reg_pp0_iter1_c1_addr_reg_487;
                ap_reg_pp0_iter2_exitcond_i_i_reg_478 <= ap_reg_pp0_iter1_exitcond_i_i_reg_478;
                ap_reg_pp0_iter3_c1_addr_reg_487 <= ap_reg_pp0_iter2_c1_addr_reg_487;
                ap_reg_pp0_iter3_exitcond_i_i_reg_478 <= ap_reg_pp0_iter2_exitcond_i_i_reg_478;
                exitcond_i_i_reg_478 <= exitcond_i_i_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ap_reg_pp1_iter1_c1_addr_1_reg_511 <= c1_addr_1_reg_511;
                ap_reg_pp1_iter1_exitcond_i4_i_reg_502 <= exitcond_i4_i_reg_502;
                ap_reg_pp1_iter2_c1_addr_1_reg_511 <= ap_reg_pp1_iter1_c1_addr_1_reg_511;
                ap_reg_pp1_iter2_exitcond_i4_i_reg_502 <= ap_reg_pp1_iter1_exitcond_i4_i_reg_502;
                ap_reg_pp1_iter3_c1_addr_1_reg_511 <= ap_reg_pp1_iter2_c1_addr_1_reg_511;
                ap_reg_pp1_iter3_exitcond_i4_i_reg_502 <= ap_reg_pp1_iter2_exitcond_i4_i_reg_502;
                exitcond_i4_i_reg_502 <= exitcond_i4_i_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i4_i_fu_430_p2 = ap_const_lv1_0))) then
                c1_addr_1_reg_511 <= tmp_i5_i_fu_442_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_fu_399_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                c1_addr_reg_487 <= tmp_i_i_fu_411_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                j_9_reg_506 <= j_9_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_reg_482 <= j_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_reg_pp1_iter2_exitcond_i4_i_reg_502 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_reg_pp0_iter2_exitcond_i_i_reg_478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_395 <= grp_mod_r_fu_390_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_i_i_reg_478 = ap_const_lv1_0))) then
                tmp_170_i_i_reg_497 <= tmp_170_i_i_fu_472_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter2, exitcond_i_i_fu_399_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, exitcond_i4_i_fu_430_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, grp_RLWE_enc2_fu_250_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_subdone, ap_enable_reg_pp1_iter3, grp_inv_ntt2_fu_384_ap_done, ap_CS_fsm_state21)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_RLWE_enc2_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_i_i_fu_399_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_i_i_fu_399_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_i4_i_fu_430_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_i4_i_fu_430_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_inv_ntt2_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(7);
    ap_CS_fsm_state21 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_i_fu_399_p2)
    begin
        if ((exitcond_i_i_fu_399_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state12_assign_proc : process(exitcond_i4_i_fu_430_p2)
    begin
        if ((exitcond_i4_i_fu_430_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_inv_ntt2_fu_384_ap_done, ap_CS_fsm_state21)
    begin
        if (((grp_inv_ntt2_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_i3_i_phi_fu_243_p4_assign_proc : process(j_i3_i_reg_239, exitcond_i4_i_reg_502, ap_CS_fsm_pp1_stage0, j_9_reg_506, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i4_i_reg_502 = ap_const_lv1_0))) then 
            ap_phi_mux_j_i3_i_phi_fu_243_p4 <= j_9_reg_506;
        else 
            ap_phi_mux_j_i3_i_phi_fu_243_p4 <= j_i3_i_reg_239;
        end if; 
    end process;


    ap_phi_mux_j_i_i_phi_fu_232_p4_assign_proc : process(j_i_i_reg_228, ap_CS_fsm_pp0_stage0, exitcond_i_i_reg_478, j_reg_482, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_reg_478 = ap_const_lv1_0))) then 
            ap_phi_mux_j_i_i_phi_fu_232_p4 <= j_reg_482;
        else 
            ap_phi_mux_j_i_i_phi_fu_232_p4 <= j_i_i_reg_228;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_inv_ntt2_fu_384_ap_done, ap_CS_fsm_state21)
    begin
        if (((grp_inv_ntt2_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    c1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp0_iter0, ap_reg_pp0_iter3_c1_addr_reg_487, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_reg_pp1_iter3_c1_addr_1_reg_511, ap_CS_fsm_state2, ap_enable_reg_pp1_iter3, grp_RLWE_enc2_fu_250_c1_address0, grp_inv_ntt2_fu_384_a_address0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_state21, ap_block_pp1_stage1, tmp_i_i_fu_411_p1, tmp_i5_i_fu_442_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            c1_address0 <= ap_reg_pp1_iter3_c1_addr_1_reg_511;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            c1_address0 <= tmp_i5_i_fu_442_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            c1_address0 <= ap_reg_pp0_iter3_c1_addr_reg_487;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c1_address0 <= tmp_i_i_fu_411_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            c1_address0 <= grp_inv_ntt2_fu_384_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_address0 <= grp_RLWE_enc2_fu_250_c1_address0;
        else 
            c1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_enable_reg_pp1_iter3, grp_RLWE_enc2_fu_250_c1_ce0, grp_inv_ntt2_fu_384_a_ce0, ap_CS_fsm_state21)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            c1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            c1_ce0 <= grp_inv_ntt2_fu_384_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_ce0 <= grp_RLWE_enc2_fu_250_c1_ce0;
        else 
            c1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_d0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state2, ap_enable_reg_pp1_iter3, grp_RLWE_enc2_fu_250_c1_d0, grp_inv_ntt2_fu_384_a_d0, ap_CS_fsm_state21, ap_block_pp1_stage1, p_trunc_ext_fu_425_p1, ap_block_pp0_stage1, p_trunc3_ext_fu_467_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            c1_d0 <= p_trunc3_ext_fu_467_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            c1_d0 <= p_trunc_ext_fu_425_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            c1_d0 <= grp_inv_ntt2_fu_384_a_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_d0 <= grp_RLWE_enc2_fu_250_c1_d0;
        else 
            c1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_reg_pp0_iter3_exitcond_i_i_reg_478, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_reg_pp1_iter3_exitcond_i4_i_reg_502, ap_CS_fsm_state2, ap_enable_reg_pp1_iter3, grp_RLWE_enc2_fu_250_c1_we0, grp_inv_ntt2_fu_384_a_we0, ap_CS_fsm_state21)
    begin
        if ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_reg_pp1_iter3_exitcond_i4_i_reg_502 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_reg_pp0_iter3_exitcond_i_i_reg_478 = ap_const_lv1_0)))) then 
            c1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            c1_we0 <= grp_inv_ntt2_fu_384_a_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_we0 <= grp_RLWE_enc2_fu_250_c1_we0;
        else 
            c1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, grp_RLWE_enc2_fu_250_c2_address0, ap_block_pp1_stage0, tmp_i5_i_fu_442_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            c2_address0 <= tmp_i5_i_fu_442_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c2_address0 <= grp_RLWE_enc2_fu_250_c2_address0;
        else 
            c2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, grp_RLWE_enc2_fu_250_c2_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            c2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c2_ce0 <= grp_RLWE_enc2_fu_250_c2_ce0;
        else 
            c2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_we0_assign_proc : process(ap_CS_fsm_state2, grp_RLWE_enc2_fu_250_c2_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c2_we0 <= grp_RLWE_enc2_fu_250_c2_we0;
        else 
            c2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i4_i_fu_430_p2 <= "1" when (ap_phi_mux_j_i3_i_phi_fu_243_p4 = ap_const_lv9_100) else "0";
    exitcond_i_i_fu_399_p2 <= "1" when (ap_phi_mux_j_i_i_phi_fu_232_p4 = ap_const_lv9_100) else "0";
    grp_RLWE_enc2_fu_250_ap_start <= ap_reg_grp_RLWE_enc2_fu_250_ap_start;
    grp_inv_ntt2_fu_384_ap_start <= ap_reg_grp_inv_ntt2_fu_384_ap_start;

    grp_mod_r_fu_390_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_mod_r_fu_390_ap_ce <= ap_const_logic_1;
        else 
            grp_mod_r_fu_390_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_mod_r_fu_390_x_assign_proc : process(ap_CS_fsm_pp0_stage0, exitcond_i_i_reg_478, ap_CS_fsm_pp1_stage1, exitcond_i4_i_reg_502, tmp_170_i_i_reg_497, ap_enable_reg_pp1_iter0, tmp_176_i_i_cast_fu_462_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_i4_i_reg_502 = ap_const_lv1_0))) then 
            grp_mod_r_fu_390_x <= tmp_176_i_i_cast_fu_462_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_reg_478 = ap_const_lv1_0))) then 
            grp_mod_r_fu_390_x <= tmp_170_i_i_reg_497;
        else 
            grp_mod_r_fu_390_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    j_9_fu_436_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_i3_i_phi_fu_243_p4) + unsigned(ap_const_lv9_1));
    j_fu_405_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_i_i_phi_fu_232_p4) + unsigned(ap_const_lv9_1));
        p_trunc3_ext_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_395),16));

        p_trunc_ext_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_395),16));

    r2_address0 <= tmp_i_i_fu_411_p1(8 - 1 downto 0);

    r2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            r2_ce0 <= ap_const_logic_1;
        else 
            r2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_170_i_i_fu_472_p0 <= tmp_170_i_i_fu_472_p00(16 - 1 downto 0);
    tmp_170_i_i_fu_472_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c1_q0),32));
    tmp_170_i_i_fu_472_p1 <= tmp_170_i_i_fu_472_p10(16 - 1 downto 0);
    tmp_170_i_i_fu_472_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r2_q0),32));
    tmp_175_i_i_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_q0),17));
    tmp_176_i_i_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_176_i_i_fu_456_p2),32));
    tmp_176_i_i_fu_456_p2 <= std_logic_vector(unsigned(tmp_i8_i_cast_fu_448_p1) + unsigned(tmp_175_i_i_cast_fu_452_p1));
    tmp_i5_i_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_i3_i_phi_fu_243_p4),64));
    tmp_i8_i_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c1_q0),17));
    tmp_i_i_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_i_i_phi_fu_232_p4),64));
end behav;
